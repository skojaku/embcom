  0%|          | 0/28395 [00:00<?, ?it/s]  0%|          | 30/28395 [00:00<06:52, 68.72it/s]  0%|          | 60/28395 [00:09<1:30:21,  5.23it/s]  0%|          | 60/28395 [00:29<1:30:21,  5.23it/s]  0%|          | 90/28395 [01:39<11:35:58,  1.48s/it]  0%|          | 120/28395 [02:32<12:28:51,  1.59s/it]  1%|          | 150/28395 [03:29<13:19:24,  1.70s/it]  1%|          | 180/28395 [04:28<14:01:48,  1.79s/it]  1%|          | 210/28395 [05:52<16:37:28,  2.12s/it]  1%|          | 240/28395 [06:49<16:02:22,  2.05s/it]  1%|          | 270/28395 [08:06<17:16:29,  2.21s/it]  1%|          | 300/28395 [09:27<18:26:46,  2.36s/it]  1%|          | 330/28395 [10:33<18:00:52,  2.31s/it]  1%|▏         | 360/28395 [11:40<17:46:11,  2.28s/it]  1%|▏         | 390/28395 [12:37<16:52:34,  2.17s/it]  1%|▏         | 420/28395 [13:43<16:54:25,  2.18s/it]  2%|▏         | 450/28395 [14:59<17:44:41,  2.29s/it]  2%|▏         | 480/28395 [16:08<17:44:39,  2.29s/it]  2%|▏         | 510/28395 [17:09<17:09:06,  2.21s/it]  2%|▏         | 540/28395 [18:34<18:32:54,  2.40s/it]  2%|▏         | 570/28395 [19:39<18:02:41,  2.33s/it]  2%|▏         | 600/28395 [20:34<16:49:35,  2.18s/it]  2%|▏         | 630/28395 [21:41<16:57:54,  2.20s/it]  2%|▏         | 660/28395 [22:40<16:24:44,  2.13s/it]  2%|▏         | 690/28395 [23:50<16:50:00,  2.19s/it]  3%|▎         | 720/28395 [24:34<15:10:34,  1.97s/it]  3%|▎         | 750/28395 [26:06<17:41:45,  2.30s/it]  3%|▎         | 780/28395 [27:26<18:29:42,  2.41s/it]  3%|▎         | 810/28395 [28:27<17:33:56,  2.29s/it]  3%|▎         | 840/28395 [29:58<19:16:07,  2.52s/it]  3%|▎         | 870/28395 [30:58<18:03:14,  2.36s/it]  3%|▎         | 900/28395 [31:48<16:24:53,  2.15s/it]  3%|▎         | 930/28395 [33:18<18:22:23,  2.41s/it]  3%|▎         | 960/28395 [34:22<17:45:16,  2.33s/it]  3%|▎         | 990/28395 [35:28<17:23:25,  2.28s/it]  4%|▎         | 1020/28395 [37:03<19:24:21,  2.55s/it]  4%|▎         | 1050/28395 [38:09<18:36:25,  2.45s/it]  4%|▍         | 1080/28395 [39:38<19:44:19,  2.60s/it]  4%|▍         | 1110/28395 [40:44<18:46:50,  2.48s/it]  4%|▍         | 1140/28395 [42:04<19:11:20,  2.53s/it]  4%|▍         | 1170/28395 [43:14<18:46:22,  2.48s/it]  4%|▍         | 1200/28395 [44:32<19:00:36,  2.52s/it]  4%|▍         | 1230/28395 [45:49<19:05:32,  2.53s/it]  4%|▍         | 1260/28395 [47:00<18:41:40,  2.48s/it]  5%|▍         | 1290/28395 [48:14<18:37:48,  2.47s/it]  5%|▍         | 1320/28395 [49:08<17:06:31,  2.27s/it]  5%|▍         | 1350/28395 [50:19<17:17:55,  2.30s/it]  5%|▍         | 1380/28395 [51:32<17:31:48,  2.34s/it]  5%|▍         | 1410/28395 [53:10<19:35:31,  2.61s/it]  5%|▌         | 1440/28395 [54:32<19:53:04,  2.66s/it]  5%|▌         | 1470/28395 [55:50<19:41:19,  2.63s/it]  5%|▌         | 1500/28395 [57:04<19:18:51,  2.59s/it]  5%|▌         | 1530/28395 [58:16<18:55:12,  2.54s/it]  5%|▌         | 1560/28395 [59:34<18:59:50,  2.55s/it]  6%|▌         | 1590/28395 [1:00:28<17:18:05,  2.32s/it]  6%|▌         | 1620/28395 [1:01:23<16:13:38,  2.18s/it]  6%|▌         | 1650/28395 [1:02:14<15:05:42,  2.03s/it]  6%|▌         | 1680/28395 [1:03:08<14:33:08,  1.96s/it]  6%|▌         | 1710/28395 [1:04:26<15:59:28,  2.16s/it]  6%|▌         | 1740/28395 [1:05:21<15:15:50,  2.06s/it]  6%|▌         | 1770/28395 [1:06:13<14:31:43,  1.96s/it]  6%|▋         | 1800/28395 [1:07:09<14:14:24,  1.93s/it]  6%|▋         | 1830/28395 [1:08:06<14:10:26,  1.92s/it]  7%|▋         | 1860/28395 [1:09:20<15:24:46,  2.09s/it]  7%|▋         | 1890/28395 [1:10:15<14:48:24,  2.01s/it]  7%|▋         | 1920/28395 [1:11:19<15:02:13,  2.04s/it]  7%|▋         | 1950/28395 [1:12:16<14:43:45,  2.01s/it]  7%|▋         | 1980/28395 [1:13:08<14:04:26,  1.92s/it]  7%|▋         | 2010/28395 [1:14:11<14:31:04,  1.98s/it]  7%|▋         | 2040/28395 [1:15:31<15:59:25,  2.18s/it]  7%|▋         | 2070/28395 [1:16:21<14:48:31,  2.03s/it]  7%|▋         | 2100/28395 [1:17:16<14:24:31,  1.97s/it]  8%|▊         | 2130/28395 [1:18:12<14:08:09,  1.94s/it]  8%|▊         | 2160/28395 [1:19:01<13:26:06,  1.84s/it]  8%|▊         | 2190/28395 [1:20:00<13:43:07,  1.88s/it]  8%|▊         | 2220/28395 [1:20:49<13:07:03,  1.80s/it]  8%|▊         | 2250/28395 [1:21:15<11:04:05,  1.52s/it]  8%|▊         | 2280/28395 [1:21:35<9:11:57,  1.27s/it]   8%|▊         | 2310/28395 [1:21:47<7:17:13,  1.01s/it]  8%|▊         | 2340/28395 [1:22:08<6:37:57,  1.09it/s]  8%|▊         | 2370/28395 [1:22:19<5:25:32,  1.33it/s]  8%|▊         | 2400/28395 [1:22:32<4:44:52,  1.52it/s]  9%|▊         | 2430/28395 [1:22:43<4:08:22,  1.74it/s]  9%|▊         | 2460/28395 [1:22:55<3:43:27,  1.93it/s]  9%|▉         | 2490/28395 [1:23:07<3:27:15,  2.08it/s]  9%|▉         | 2520/28395 [1:23:20<3:23:49,  2.12it/s]  9%|▉         | 2550/28395 [1:23:31<3:06:21,  2.31it/s]  9%|▉         | 2580/28395 [1:23:44<3:08:14,  2.29it/s]  9%|▉         | 2610/28395 [1:23:56<3:04:14,  2.33it/s]  9%|▉         | 2640/28395 [1:24:06<2:48:53,  2.54it/s]  9%|▉         | 2670/28395 [1:24:19<2:55:16,  2.45it/s] 10%|▉         | 2700/28395 [1:24:28<2:42:03,  2.64it/s] 10%|▉         | 2730/28395 [1:24:39<2:38:09,  2.70it/s] 10%|▉         | 2760/28395 [1:24:48<2:31:34,  2.82it/s] 10%|▉         | 2790/28395 [1:24:57<2:23:17,  2.98it/s] 10%|▉         | 2820/28395 [1:25:05<2:15:21,  3.15it/s] 10%|█         | 2850/28395 [1:25:15<2:15:25,  3.14it/s] 10%|█         | 2880/28395 [1:25:25<2:16:37,  3.11it/s] 10%|█         | 2910/28395 [1:25:35<2:21:11,  3.01it/s] 10%|█         | 2940/28395 [1:25:44<2:15:20,  3.13it/s] 10%|█         | 2970/28395 [1:25:54<2:17:34,  3.08it/s] 11%|█         | 3000/28395 [1:26:03<2:12:01,  3.21it/s] 11%|█         | 3030/28395 [1:26:14<2:19:46,  3.02it/s] 11%|█         | 3060/28395 [1:26:24<2:21:51,  2.98it/s] 11%|█         | 3090/28395 [1:26:33<2:16:39,  3.09it/s] 11%|█         | 3120/28395 [1:26:43<2:17:47,  3.06it/s] 11%|█         | 3150/28395 [1:26:52<2:14:20,  3.13it/s] 11%|█         | 3180/28395 [1:27:04<2:24:25,  2.91it/s] 11%|█▏        | 3210/28395 [1:27:15<2:24:24,  2.91it/s] 11%|█▏        | 3240/28395 [1:27:23<2:17:30,  3.05it/s] 12%|█▏        | 3270/28395 [1:27:33<2:16:29,  3.07it/s] 12%|█▏        | 3300/28395 [1:27:41<2:09:05,  3.24it/s] 12%|█▏        | 3330/28395 [1:27:50<2:08:24,  3.25it/s] 12%|█▏        | 3360/28395 [1:28:00<2:12:34,  3.15it/s] 12%|█▏        | 3390/28395 [1:28:10<2:12:13,  3.15it/s] 12%|█▏        | 3420/28395 [1:28:20<2:13:44,  3.11it/s] 12%|█▏        | 3450/28395 [1:28:29<2:10:44,  3.18it/s] 12%|█▏        | 3480/28395 [1:28:36<2:02:27,  3.39it/s] 12%|█▏        | 3510/28395 [1:28:47<2:08:37,  3.22it/s] 12%|█▏        | 3540/28395 [1:28:57<2:14:06,  3.09it/s] 13%|█▎        | 3570/28395 [1:29:07<2:14:56,  3.07it/s] 13%|█▎        | 3600/28395 [1:29:17<2:13:15,  3.10it/s] 13%|█▎        | 3630/28395 [1:29:27<2:17:06,  3.01it/s] 13%|█▎        | 3660/28395 [1:29:39<2:23:48,  2.87it/s] 13%|█▎        | 3690/28395 [1:29:47<2:13:48,  3.08it/s] 13%|█▎        | 3720/28395 [1:29:57<2:13:06,  3.09it/s] 13%|█▎        | 3750/28395 [1:30:08<2:19:26,  2.95it/s] 13%|█▎        | 3780/28395 [1:30:19<2:21:44,  2.89it/s] 13%|█▎        | 3810/28395 [1:30:29<2:19:37,  2.93it/s] 14%|█▎        | 3840/28395 [1:30:38<2:16:30,  3.00it/s] 14%|█▎        | 3870/28395 [1:30:48<2:17:42,  2.97it/s] 14%|█▎        | 3900/28395 [1:30:57<2:12:05,  3.09it/s] 14%|█▍        | 3930/28395 [1:31:06<2:08:35,  3.17it/s] 14%|█▍        | 3960/28395 [1:31:17<2:13:09,  3.06it/s] 14%|█▍        | 3990/28395 [1:31:22<1:55:31,  3.52it/s] 14%|█▍        | 4020/28395 [1:31:32<1:58:35,  3.43it/s] 14%|█▍        | 4050/28395 [1:31:41<2:01:37,  3.34it/s] 14%|█▍        | 4080/28395 [1:31:52<2:09:54,  3.12it/s] 14%|█▍        | 4110/28395 [1:32:03<2:15:53,  2.98it/s] 15%|█▍        | 4140/28395 [1:32:11<2:06:16,  3.20it/s] 15%|█▍        | 4170/28395 [1:32:23<2:14:48,  2.99it/s] 15%|█▍        | 4200/28395 [1:32:31<2:09:39,  3.11it/s] 15%|█▍        | 4230/28395 [1:32:43<2:17:06,  2.94it/s] 15%|█▌        | 4260/28395 [1:32:55<2:25:13,  2.77it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 15%|█▌        | 4290/28395 [1:33:04<2:15:10,  2.97it/s] 15%|█▌        | 4320/28395 [1:33:14<2:17:28,  2.92it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 15%|█▌        | 4350/28395 [1:33:25<2:20:50,  2.85it/s] 15%|█▌        | 4380/28395 [1:33:35<2:18:18,  2.89it/s] 16%|█▌        | 4410/28395 [1:33:47<2:22:08,  2.81it/s] 16%|█▌        | 4440/28395 [1:33:56<2:15:42,  2.94it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 16%|█▌        | 4470/28395 [1:34:06<2:16:42,  2.92it/s] 16%|█▌        | 4500/28395 [1:34:13<2:02:35,  3.25it/s] 16%|█▌        | 4530/28395 [1:34:21<1:58:56,  3.34it/s] 16%|█▌        | 4560/28395 [1:34:28<1:49:57,  3.61it/s] 16%|█▌        | 4590/28395 [1:34:38<1:54:05,  3.48it/s] 16%|█▋        | 4620/28395 [1:34:47<1:58:39,  3.34it/s] 16%|█▋        | 4650/28395 [1:34:58<2:04:06,  3.19it/s] 16%|█▋        | 4680/28395 [1:35:08<2:05:57,  3.14it/s] 17%|█▋        | 4710/28395 [1:35:17<2:03:34,  3.19it/s] 17%|█▋        | 4740/28395 [1:35:26<2:03:52,  3.18it/s] 17%|█▋        | 4770/28395 [1:35:35<2:02:51,  3.20it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 17%|█▋        | 4800/28395 [1:35:45<2:04:33,  3.16it/s] 17%|█▋        | 4830/28395 [1:35:56<2:07:51,  3.07it/s] 17%|█▋        | 4860/28395 [1:36:04<2:02:57,  3.19it/s] 17%|█▋        | 4890/28395 [1:36:14<2:02:23,  3.20it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 17%|█▋        | 4920/28395 [1:36:23<2:02:04,  3.21it/s] 17%|█▋        | 4950/28395 [1:36:32<2:02:09,  3.20it/s] 18%|█▊        | 4980/28395 [1:36:43<2:06:54,  3.08it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 18%|█▊        | 5010/28395 [1:36:51<1:59:15,  3.27it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 18%|█▊        | 5040/28395 [1:37:01<2:03:26,  3.15it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 18%|█▊        | 5070/28395 [1:37:08<1:53:06,  3.44it/s] 18%|█▊        | 5100/28395 [1:37:15<1:48:00,  3.59it/s] 18%|█▊        | 5130/28395 [1:37:25<1:51:50,  3.47it/s] 18%|█▊        | 5160/28395 [1:37:33<1:51:45,  3.47it/s] 18%|█▊        | 5190/28395 [1:37:42<1:49:32,  3.53it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 18%|█▊        | 5220/28395 [1:37:51<1:53:56,  3.39it/s] 18%|█▊        | 5250/28395 [1:38:01<1:57:01,  3.30it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 19%|█▊        | 5280/28395 [1:38:08<1:49:43,  3.51it/s] 19%|█▊        | 5310/28395 [1:38:17<1:50:38,  3.48it/s] 19%|█▉        | 5340/28395 [1:38:24<1:43:01,  3.73it/s] 19%|█▉        | 5370/28395 [1:38:32<1:43:23,  3.71it/s] 19%|█▉        | 5400/28395 [1:38:40<1:43:28,  3.70it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 19%|█▉        | 5430/28395 [1:38:47<1:40:51,  3.79it/s] 19%|█▉        | 5436/28395 [1:38:48<1:34:57,  4.03it/s] 19%|█▉        | 5460/28395 [1:38:56<1:47:31,  3.56it/s] 19%|█▉        | 5490/28395 [1:39:04<1:43:57,  3.67it/s] 19%|█▉        | 5520/28395 [1:39:12<1:43:08,  3.70it/s] 20%|█▉        | 5550/28395 [1:39:19<1:39:24,  3.83it/s] 20%|█▉        | 5580/28395 [1:39:28<1:44:48,  3.63it/s] 20%|█▉        | 5610/28395 [1:39:37<1:44:48,  3.62it/s] 20%|█▉        | 5640/28395 [1:39:43<1:35:21,  3.98it/s] 20%|█▉        | 5670/28395 [1:39:50<1:34:03,  4.03it/s] 20%|██        | 5700/28395 [1:39:57<1:30:37,  4.17it/s] 20%|██        | 5730/28395 [1:40:02<1:25:33,  4.42it/s] 20%|██        | 5760/28395 [1:40:09<1:25:31,  4.41it/s] 20%|██        | 5790/28395 [1:40:15<1:21:35,  4.62it/s] 20%|██        | 5820/28395 [1:40:22<1:23:40,  4.50it/s] 21%|██        | 5850/28395 [1:40:29<1:23:32,  4.50it/s] 21%|██        | 5880/28395 [1:40:36<1:24:46,  4.43it/s] 21%|██        | 5910/28395 [1:40:42<1:24:14,  4.45it/s] 21%|██        | 5940/28395 [1:40:50<1:25:40,  4.37it/s] 21%|██        | 5970/28395 [1:40:56<1:24:49,  4.41it/s] 21%|██        | 6000/28395 [1:41:04<1:27:11,  4.28it/s] 21%|██        | 6030/28395 [1:41:09<1:22:24,  4.52it/s] 21%|██▏       | 6060/28395 [1:41:17<1:23:44,  4.45it/s] 21%|██▏       | 6090/28395 [1:41:22<1:19:40,  4.67it/s] 22%|██▏       | 6120/28395 [1:41:30<1:24:24,  4.40it/s] 22%|██▏       | 6150/28395 [1:41:35<1:19:06,  4.69it/s] 22%|██▏       | 6180/28395 [1:41:42<1:18:56,  4.69it/s] 22%|██▏       | 6210/28395 [1:41:55<1:43:16,  3.58it/s] 22%|██▏       | 6240/28395 [1:42:01<1:33:51,  3.93it/s] 22%|██▏       | 6270/28395 [1:42:06<1:26:06,  4.28it/s] 22%|██▏       | 6300/28395 [1:42:11<1:18:01,  4.72it/s] 22%|██▏       | 6330/28395 [1:42:18<1:19:19,  4.64it/s] 22%|██▏       | 6360/28395 [1:42:23<1:16:27,  4.80it/s] 23%|██▎       | 6390/28395 [1:42:29<1:14:23,  4.93it/s] 23%|██▎       | 6420/28395 [1:42:36<1:17:08,  4.75it/s] 23%|██▎       | 6450/28395 [1:42:41<1:12:40,  5.03it/s] 23%|██▎       | 6480/28395 [1:42:47<1:12:29,  5.04it/s] 23%|██▎       | 6510/28395 [1:42:53<1:10:25,  5.18it/s] 23%|██▎       | 6540/28395 [1:42:58<1:08:06,  5.35it/s] 23%|██▎       | 6570/28395 [1:43:04<1:10:04,  5.19it/s] 23%|██▎       | 6600/28395 [1:43:09<1:07:38,  5.37it/s] 23%|██▎       | 6630/28395 [1:43:13<59:54,  6.06it/s]   23%|██▎       | 6660/28395 [1:43:16<55:24,  6.54it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 24%|██▎       | 6690/28395 [1:43:19<47:16,  7.65it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 24%|██▎       | 6720/28395 [1:43:21<42:37,  8.48it/s] 24%|██▍       | 6750/28395 [1:43:24<38:37,  9.34it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 24%|██▍       | 6780/28395 [1:43:26<37:02,  9.73it/s] 24%|██▍       | 6810/28395 [1:43:29<35:35, 10.11it/s] 24%|██▍       | 6840/28395 [1:43:34<41:14,  8.71it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 24%|██▍       | 6870/28395 [1:43:36<37:33,  9.55it/s] 24%|██▍       | 6900/28395 [1:43:38<33:41, 10.63it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 24%|██▍       | 6930/28395 [1:43:40<31:31, 11.35it/s] 25%|██▍       | 6960/28395 [1:43:43<31:10, 11.46it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 25%|██▍       | 6990/28395 [1:43:46<32:18, 11.04it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 25%|██▍       | 7020/28395 [1:43:48<31:11, 11.42it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 25%|██▍       | 7050/28395 [1:43:50<28:40, 12.41it/s] 25%|██▍       | 7080/28395 [1:43:53<28:15, 12.57it/s] 25%|██▌       | 7110/28395 [1:43:55<26:48, 13.24it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 25%|██▌       | 7140/28395 [1:43:57<26:02, 13.61it/s] 25%|██▌       | 7170/28395 [1:43:59<27:56, 12.66it/s] 25%|██▌       | 7200/28395 [1:44:02<27:05, 13.04it/s] 25%|██▌       | 7230/28395 [1:44:04<28:20, 12.45it/s] 26%|██▌       | 7260/28395 [1:44:07<27:45, 12.69it/s] 26%|██▌       | 7290/28395 [1:44:09<28:11, 12.47it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 26%|██▌       | 7320/28395 [1:44:11<27:30, 12.77it/s] 26%|██▌       | 7350/28395 [1:44:13<27:08, 12.93it/s] 26%|██▌       | 7380/28395 [1:44:16<26:44, 13.10it/s] 26%|██▌       | 7410/28395 [1:44:18<26:00, 13.44it/s] 26%|██▌       | 7440/28395 [1:44:20<26:36, 13.13it/s] 26%|██▋       | 7470/28395 [1:44:22<26:29, 13.16it/s] 26%|██▋       | 7500/28395 [1:44:24<24:48, 14.04it/s] 27%|██▋       | 7530/28395 [1:44:26<24:25, 14.24it/s] 27%|██▋       | 7560/28395 [1:44:29<25:18, 13.72it/s] 27%|██▋       | 7590/28395 [1:44:31<25:00, 13.86it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 27%|██▋       | 7620/28395 [1:44:33<23:35, 14.68it/s] 27%|██▋       | 7650/28395 [1:44:34<23:02, 15.00it/s] 27%|██▋       | 7680/28395 [1:44:36<22:33, 15.30it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 27%|██▋       | 7710/28395 [1:44:39<23:46, 14.50it/s] 27%|██▋       | 7740/28395 [1:44:41<23:53, 14.41it/s] 27%|██▋       | 7770/28395 [1:44:43<24:47, 13.87it/s] 27%|██▋       | 7800/28395 [1:44:45<23:15, 14.75it/s] 28%|██▊       | 7830/28395 [1:44:47<24:58, 13.72it/s] 28%|██▊       | 7860/28395 [1:44:50<24:44, 13.84it/s] 28%|██▊       | 7890/28395 [1:44:51<23:08, 14.77it/s] 28%|██▊       | 7920/28395 [1:44:53<23:53, 14.29it/s] 28%|██▊       | 7950/28395 [1:44:56<23:55, 14.25it/s] 28%|██▊       | 7980/28395 [1:44:58<23:30, 14.47it/s] 28%|██▊       | 8010/28395 [1:45:00<23:32, 14.43it/s] 28%|██▊       | 8040/28395 [1:45:02<22:50, 14.85it/s] 28%|██▊       | 8070/28395 [1:45:04<23:02, 14.70it/s] 29%|██▊       | 8100/28395 [1:45:06<22:31, 15.01it/s] 29%|██▊       | 8130/28395 [1:45:08<22:22, 15.09it/s] 29%|██▊       | 8160/28395 [1:45:10<22:54, 14.72it/s] 29%|██▉       | 8190/28395 [1:45:12<22:40, 14.85it/s] 29%|██▉       | 8220/28395 [1:45:14<22:09, 15.17it/s] 29%|██▉       | 8250/28395 [1:45:15<20:43, 16.19it/s] 29%|██▉       | 8280/28395 [1:45:17<19:40, 17.04it/s] 29%|██▉       | 8310/28395 [1:45:19<20:14, 16.54it/s] 29%|██▉       | 8340/28395 [1:45:21<20:45, 16.10it/s] 29%|██▉       | 8370/28395 [1:45:23<21:16, 15.69it/s] 30%|██▉       | 8400/28395 [1:45:24<21:06, 15.79it/s] 30%|██▉       | 8430/28395 [1:45:26<20:09, 16.50it/s] 30%|██▉       | 8460/28395 [1:45:28<20:58, 15.84it/s] 30%|██▉       | 8490/28395 [1:45:30<20:39, 16.06it/s] 30%|███       | 8520/28395 [1:45:32<22:13, 14.90it/s] 30%|███       | 8550/28395 [1:45:34<22:08, 14.94it/s] 30%|███       | 8580/28395 [1:45:37<25:13, 13.10it/s] 30%|███       | 8610/28395 [1:45:40<25:43, 12.82it/s] 30%|███       | 8640/28395 [1:45:42<24:20, 13.52it/s] 31%|███       | 8670/28395 [1:45:43<22:42, 14.48it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 31%|███       | 8700/28395 [1:45:46<23:40, 13.86it/s] 31%|███       | 8730/28395 [1:45:48<23:50, 13.75it/s] 31%|███       | 8760/28395 [1:45:50<23:20, 14.02it/s] 31%|███       | 8790/28395 [1:45:52<21:19, 15.32it/s] 31%|███       | 8820/28395 [1:45:53<19:37, 16.62it/s] 31%|███       | 8850/28395 [1:45:54<17:10, 18.97it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 31%|███▏      | 8880/28395 [1:45:56<17:50, 18.23it/s] 31%|███▏      | 8910/28395 [1:45:58<18:18, 17.73it/s] 31%|███▏      | 8940/28395 [1:45:59<17:31, 18.50it/s] 32%|███▏      | 8970/28395 [1:46:01<18:54, 17.12it/s] 32%|███▏      | 9000/28395 [1:46:03<19:06, 16.91it/s] 32%|███▏      | 9030/28395 [1:46:05<20:48, 15.51it/s] 32%|███▏      | 9060/28395 [1:46:07<18:57, 17.00it/s] 32%|███▏      | 9090/28395 [1:46:09<19:31, 16.47it/s] 32%|███▏      | 9120/28395 [1:46:10<18:35, 17.29it/s] 32%|███▏      | 9150/28395 [1:46:12<18:11, 17.64it/s] 32%|███▏      | 9180/28395 [1:46:14<18:42, 17.11it/s] 32%|███▏      | 9210/28395 [1:46:16<19:27, 16.43it/s]eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
 33%|███▎      | 9240/28395 [1:46:17<19:15, 16.58it/s] 33%|███▎      | 9270/28395 [1:46:19<19:15, 16.55it/s] 33%|███▎      | 9300/28395 [1:46:21<19:33, 16.28it/s] 33%|███▎      | 9330/28395 [1:46:23<19:07, 16.61it/s] 33%|███▎      | 9360/28395 [1:46:25<18:38, 17.02it/s] 33%|███▎      | 9390/28395 [1:46:26<16:47, 18.86it/s] 33%|███▎      | 9420/28395 [1:46:27<16:12, 19.51it/s] 33%|███▎      | 9450/28395 [1:46:29<15:35, 20.25it/s] 33%|███▎      | 9480/28395 [1:46:30<16:23, 19.22it/s] 33%|███▎      | 9510/28395 [1:46:32<16:23, 19.21it/s] 34%|███▎      | 9540/28395 [1:46:33<15:54, 19.75it/s] 34%|███▎      | 9570/28395 [1:46:35<15:09, 20.71it/s] 34%|███▍      | 9600/28395 [1:46:36<16:23, 19.11it/s] 34%|███▍      | 9630/28395 [1:46:38<15:24, 20.30it/s] 34%|███▍      | 9660/28395 [1:46:39<15:47, 19.78it/s] 34%|███▍      | 9690/28395 [1:46:41<15:54, 19.60it/s] 34%|███▍      | 9720/28395 [1:46:42<15:41, 19.84it/s] 34%|███▍      | 9750/28395 [1:46:44<15:51, 19.60it/s] 34%|███▍      | 9780/28395 [1:46:45<15:47, 19.64it/s] 35%|███▍      | 9810/28395 [1:46:47<14:42, 21.05it/s] 35%|███▍      | 9840/28395 [1:46:48<14:41, 21.06it/s] 35%|███▍      | 9862/28395 [1:46:49<13:08, 23.50it/s] 35%|███▍      | 9870/28395 [1:46:50<17:30, 17.63it/s] 35%|███▍      | 9900/28395 [1:46:51<15:35, 19.76it/s] 35%|███▍      | 9930/28395 [1:46:53<15:11, 20.26it/s] 35%|███▌      | 9960/28395 [1:46:54<15:26, 19.90it/s] 35%|███▌      | 9990/28395 [1:46:56<15:24, 19.92it/s] 35%|███▌      | 10020/28395 [1:46:57<13:57, 21.95it/s] 35%|███▌      | 10050/28395 [1:46:58<13:18, 22.96it/s] 35%|███▌      | 10080/28395 [1:46:59<12:29, 24.45it/s] 36%|███▌      | 10110/28395 [1:47:01<13:47, 22.11it/s] 36%|███▌      | 10140/28395 [1:47:02<13:26, 22.62it/s] 36%|███▌      | 10170/28395 [1:47:03<13:07, 23.13it/s] 36%|███▌      | 10200/28395 [1:47:04<12:19, 24.60it/s] 36%|███▌      | 10230/28395 [1:47:06<13:23, 22.60it/s] 36%|███▌      | 10260/28395 [1:47:07<13:05, 23.08it/s] 36%|███▌      | 10290/28395 [1:47:08<12:14, 24.66it/s] 36%|███▋      | 10320/28395 [1:47:09<12:23, 24.32it/s] 36%|███▋      | 10350/28395 [1:47:10<12:11, 24.65it/s] 37%|███▋      | 10380/28395 [1:47:12<12:05, 24.82it/s] 37%|███▋      | 10410/28395 [1:47:13<11:43, 25.58it/s] 37%|███▋      | 10440/28395 [1:47:14<11:49, 25.31it/s] 37%|███▋      | 10470/28395 [1:47:15<11:51, 25.18it/s] 37%|███▋      | 10500/28395 [1:47:16<11:28, 25.97it/s] 37%|███▋      | 10530/28395 [1:47:17<11:17, 26.39it/s] 37%|███▋      | 10560/28395 [1:47:18<11:13, 26.50it/s] 37%|███▋      | 10590/28395 [1:47:20<11:50, 25.06it/s] 37%|███▋      | 10620/28395 [1:47:21<12:27, 23.78it/s] 38%|███▊      | 10650/28395 [1:47:22<11:29, 25.73it/s] 38%|███▊      | 10680/28395 [1:47:23<11:41, 25.24it/s] 38%|███▊      | 10710/28395 [1:47:25<12:55, 22.82it/s] 38%|███▊      | 10740/28395 [1:47:26<11:35, 25.40it/s] 38%|███▊      | 10770/28395 [1:47:27<11:57, 24.58it/s] 38%|███▊      | 10800/28395 [1:47:28<11:25, 25.67it/s] 38%|███▊      | 10830/28395 [1:47:29<10:42, 27.35it/s] 38%|███▊      | 10860/28395 [1:47:30<10:46, 27.11it/s] 38%|███▊      | 10890/28395 [1:47:31<10:45, 27.11it/s] 38%|███▊      | 10920/28395 [1:47:32<10:47, 26.98it/s] 39%|███▊      | 10950/28395 [1:47:34<11:08, 26.08it/s] 39%|███▊      | 10980/28395 [1:47:35<10:22, 27.99it/s] 39%|███▉      | 11010/28395 [1:47:35<09:33, 30.33it/s] 39%|███▉      | 11040/28395 [1:47:36<09:02, 31.98it/s] 39%|███▉      | 11070/28395 [1:47:37<08:36, 33.57it/s] 39%|███▉      | 11100/28395 [1:47:38<08:13, 35.05it/s] 39%|███▉      | 11130/28395 [1:47:38<07:48, 36.82it/s] 39%|███▉      | 11160/28395 [1:47:39<07:43, 37.21it/s] 39%|███▉      | 11190/28395 [1:47:40<07:02, 40.68it/s] 40%|███▉      | 11220/28395 [1:47:40<06:44, 42.49it/s] 40%|███▉      | 11250/28395 [1:47:41<06:09, 46.40it/s] 40%|███▉      | 11280/28395 [1:47:42<06:15, 45.52it/s] 40%|███▉      | 11310/28395 [1:47:42<06:29, 43.87it/s] 40%|███▉      | 11340/28395 [1:47:43<06:26, 44.12it/s] 40%|████      | 11370/28395 [1:47:44<06:04, 46.75it/s] 40%|████      | 11400/28395 [1:47:44<06:27, 43.88it/s] 40%|████      | 11430/28395 [1:47:45<06:00, 47.06it/s] 40%|████      | 11460/28395 [1:47:46<06:26, 43.84it/s] 40%|████      | 11490/28395 [1:47:46<06:15, 45.06it/s] 41%|████      | 11520/28395 [1:47:47<06:15, 44.92it/s] 41%|████      | 11550/28395 [1:47:48<06:08, 45.74it/s] 41%|████      | 11580/28395 [1:47:48<06:36, 42.37it/s] 41%|████      | 11610/28395 [1:47:49<06:39, 42.04it/s] 41%|████      | 11640/28395 [1:47:50<06:13, 44.85it/s] 41%|████      | 11670/28395 [1:47:51<06:29, 42.90it/s] 41%|████      | 11700/28395 [1:47:51<06:21, 43.76it/s] 41%|████▏     | 11730/28395 [1:47:52<06:20, 43.75it/s] 41%|████▏     | 11760/28395 [1:47:53<06:43, 41.21it/s] 42%|████▏     | 11790/28395 [1:47:53<06:46, 40.84it/s] 42%|████▏     | 11820/28395 [1:47:54<06:52, 40.15it/s] 42%|████▏     | 11850/28395 [1:47:55<06:52, 40.10it/s] 42%|████▏     | 11880/28395 [1:47:56<06:31, 42.24it/s] 42%|████▏     | 11910/28395 [1:47:56<06:41, 41.07it/s] 42%|████▏     | 11940/28395 [1:47:57<05:56, 46.09it/s] 42%|████▏     | 11970/28395 [1:47:58<06:30, 42.11it/s] 42%|████▏     | 12000/28395 [1:47:58<06:35, 41.40it/s] 42%|████▏     | 12030/28395 [1:47:59<06:32, 41.73it/s] 42%|████▏     | 12060/28395 [1:48:00<06:56, 39.26it/s] 43%|████▎     | 12073/28395 [1:48:01<07:29, 36.31it/s] 43%|████▎     | 12090/28395 [1:48:01<06:46, 40.10it/s] 43%|████▎     | 12120/28395 [1:48:01<04:50, 55.99it/s] 43%|████▎     | 12150/28395 [1:48:02<05:48, 46.55it/s] 43%|████▎     | 12180/28395 [1:48:03<06:13, 43.37it/s] 43%|████▎     | 12210/28395 [1:48:04<06:57, 38.77it/s] 43%|████▎     | 12240/28395 [1:48:04<07:01, 38.34it/s] 43%|████▎     | 12270/28395 [1:48:05<06:54, 38.95it/s] 43%|████▎     | 12300/28395 [1:48:06<07:03, 38.02it/s] 43%|████▎     | 12330/28395 [1:48:07<06:45, 39.61it/s] 44%|████▎     | 12360/28395 [1:48:08<07:28, 35.75it/s] 44%|████▎     | 12390/28395 [1:48:08<07:22, 36.15it/s] 44%|████▎     | 12420/28395 [1:48:09<07:28, 35.63it/s] 44%|████▍     | 12450/28395 [1:48:10<07:29, 35.44it/s] 44%|████▍     | 12480/28395 [1:48:11<07:10, 36.97it/s] 44%|████▍     | 12510/28395 [1:48:12<07:01, 37.73it/s] 44%|████▍     | 12540/28395 [1:48:12<06:52, 38.45it/s] 44%|████▍     | 12570/28395 [1:48:13<06:51, 38.48it/s] 44%|████▍     | 12600/28395 [1:48:14<06:38, 39.60it/s] 44%|████▍     | 12630/28395 [1:48:15<06:19, 41.59it/s] 45%|████▍     | 12660/28395 [1:48:15<06:01, 43.50it/s] 45%|████▍     | 12690/28395 [1:48:16<05:57, 43.92it/s] 45%|████▍     | 12720/28395 [1:48:16<05:55, 44.09it/s] 45%|████▍     | 12750/28395 [1:48:17<05:58, 43.64it/s] 45%|████▌     | 12780/28395 [1:48:18<05:52, 44.36it/s] 45%|████▌     | 12810/28395 [1:48:18<05:42, 45.55it/s] 45%|████▌     | 12840/28395 [1:48:19<05:54, 43.89it/s] 45%|████▌     | 12870/28395 [1:48:20<05:25, 47.68it/s] 45%|████▌     | 12900/28395 [1:48:20<05:44, 45.03it/s] 46%|████▌     | 12930/28395 [1:48:21<05:26, 47.39it/s] 46%|████▌     | 12960/28395 [1:48:22<05:33, 46.26it/s] 46%|████▌     | 12990/28395 [1:48:23<06:00, 42.73it/s] 46%|████▌     | 13020/28395 [1:48:23<06:24, 40.00it/s] 46%|████▌     | 13050/28395 [1:48:24<06:08, 41.66it/s] 46%|████▌     | 13080/28395 [1:48:25<06:22, 40.06it/s] 46%|████▌     | 13110/28395 [1:48:26<06:09, 41.41it/s] 46%|████▋     | 13140/28395 [1:48:26<05:47, 43.92it/s] 46%|████▋     | 13170/28395 [1:48:27<05:43, 44.26it/s] 46%|████▋     | 13200/28395 [1:48:27<05:19, 47.52it/s] 47%|████▋     | 13230/28395 [1:48:28<05:00, 50.43it/s] 47%|████▋     | 13260/28395 [1:48:28<04:58, 50.77it/s] 47%|████▋     | 13290/28395 [1:48:29<04:55, 51.20it/s] 47%|████▋     | 13320/28395 [1:48:30<04:54, 51.20it/s] 47%|████▋     | 13350/28395 [1:48:30<04:28, 56.08it/s] 47%|████▋     | 13380/28395 [1:48:30<04:30, 55.57it/s] 47%|████▋     | 13410/28395 [1:48:31<04:31, 55.12it/s] 47%|████▋     | 13440/28395 [1:48:32<04:43, 52.68it/s] 47%|████▋     | 13470/28395 [1:48:32<05:03, 49.24it/s] 48%|████▊     | 13500/28395 [1:48:33<05:03, 49.01it/s] 48%|████▊     | 13530/28395 [1:48:34<05:05, 48.63it/s] 48%|████▊     | 13560/28395 [1:48:34<04:45, 51.90it/s] 48%|████▊     | 13590/28395 [1:48:35<04:51, 50.75it/s] 48%|████▊     | 13620/28395 [1:48:35<04:57, 49.61it/s] 48%|████▊     | 13650/28395 [1:48:36<05:20, 46.02it/s] 48%|████▊     | 13680/28395 [1:48:37<05:06, 48.06it/s] 48%|████▊     | 13710/28395 [1:48:37<04:54, 49.84it/s] 48%|████▊     | 13740/28395 [1:48:38<04:55, 49.55it/s] 48%|████▊     | 13770/28395 [1:48:38<04:59, 48.85it/s] 49%|████▊     | 13800/28395 [1:48:39<04:41, 51.76it/s] 49%|████▊     | 13830/28395 [1:48:39<04:24, 55.13it/s] 49%|████▉     | 13860/28395 [1:48:40<04:21, 55.48it/s] 49%|████▉     | 13890/28395 [1:48:40<04:07, 58.50it/s] 49%|████▉     | 13920/28395 [1:48:41<04:21, 55.32it/s] 49%|████▉     | 13950/28395 [1:48:41<03:50, 62.65it/s] 49%|████▉     | 13980/28395 [1:48:42<04:24, 54.58it/s] 49%|████▉     | 14010/28395 [1:48:43<04:12, 57.06it/s] 49%|████▉     | 14040/28395 [1:48:43<04:07, 58.09it/s] 50%|████▉     | 14070/28395 [1:48:44<03:57, 60.31it/s] 50%|████▉     | 14100/28395 [1:48:44<04:12, 56.59it/s] 50%|████▉     | 14130/28395 [1:48:45<04:09, 57.21it/s] 50%|████▉     | 14160/28395 [1:48:45<03:29, 67.86it/s] 50%|████▉     | 14190/28395 [1:48:45<03:22, 70.02it/s] 50%|█████     | 14220/28395 [1:48:46<03:56, 59.83it/s] 50%|█████     | 14250/28395 [1:48:46<03:45, 62.60it/s] 50%|█████     | 14280/28395 [1:48:47<03:59, 58.84it/s] 50%|█████     | 14310/28395 [1:48:47<03:57, 59.39it/s] 51%|█████     | 14340/28395 [1:48:48<03:41, 63.33it/s] 51%|█████     | 14370/28395 [1:48:48<03:23, 68.93it/s] 51%|█████     | 14400/28395 [1:48:49<03:04, 75.70it/s] 51%|█████     | 14430/28395 [1:48:49<02:49, 82.32it/s] 51%|█████     | 14460/28395 [1:48:49<02:54, 80.05it/s] 51%|█████     | 14490/28395 [1:48:49<02:37, 88.16it/s] 51%|█████     | 14520/28395 [1:48:50<02:36, 88.42it/s] 51%|█████     | 14550/28395 [1:48:50<02:25, 95.08it/s] 51%|█████▏    | 14580/28395 [1:48:50<02:38, 87.10it/s] 51%|█████▏    | 14610/28395 [1:48:51<02:22, 96.98it/s] 52%|█████▏    | 14640/28395 [1:48:51<02:10, 105.19it/s] 52%|█████▏    | 14670/28395 [1:48:51<02:09, 106.05it/s] 52%|█████▏    | 14700/28395 [1:48:51<02:05, 109.12it/s] 52%|█████▏    | 14730/28395 [1:48:52<03:10, 71.84it/s]  52%|█████▏    | 14760/28395 [1:48:52<02:44, 83.07it/s] 52%|█████▏    | 14790/28395 [1:48:53<02:48, 80.59it/s] 52%|█████▏    | 14820/28395 [1:48:53<02:34, 87.98it/s] 52%|█████▏    | 14850/28395 [1:48:53<02:04, 108.52it/s] 52%|█████▏    | 14880/28395 [1:48:53<01:54, 117.87it/s] 53%|█████▎    | 14910/28395 [1:48:54<02:11, 102.92it/s] 53%|█████▎    | 14940/28395 [1:48:54<02:14, 100.09it/s] 53%|█████▎    | 14970/28395 [1:48:54<02:18, 97.01it/s]  53%|█████▎    | 15000/28395 [1:48:55<02:26, 91.56it/s] 53%|█████▎    | 15030/28395 [1:48:55<02:19, 95.68it/s] 53%|█████▎    | 15060/28395 [1:48:55<02:07, 104.42it/s] 53%|█████▎    | 15090/28395 [1:48:56<02:05, 106.44it/s] 53%|█████▎    | 15120/28395 [1:48:56<02:17, 96.77it/s]  53%|█████▎    | 15150/28395 [1:48:56<02:02, 108.48it/s] 53%|█████▎    | 15180/28395 [1:48:56<02:07, 103.36it/s] 54%|█████▎    | 15210/28395 [1:48:57<01:56, 113.44it/s] 54%|█████▎    | 15240/28395 [1:48:57<02:09, 101.98it/s] 54%|█████▍    | 15270/28395 [1:48:57<02:13, 98.17it/s]  54%|█████▍    | 15300/28395 [1:48:58<01:54, 114.28it/s] 54%|█████▍    | 15330/28395 [1:48:58<02:03, 106.16it/s] 54%|█████▍    | 15360/28395 [1:48:58<02:10, 99.81it/s]  54%|█████▍    | 15390/28395 [1:48:59<02:18, 93.58it/s] 54%|█████▍    | 15420/28395 [1:48:59<02:13, 97.34it/s] 54%|█████▍    | 15450/28395 [1:48:59<02:02, 106.09it/s] 55%|█████▍    | 15480/28395 [1:48:59<01:59, 108.27it/s] 55%|█████▍    | 15510/28395 [1:49:00<01:55, 111.76it/s] 55%|█████▍    | 15540/28395 [1:49:00<01:54, 112.00it/s] 55%|█████▍    | 15570/28395 [1:49:00<01:53, 113.50it/s] 55%|█████▍    | 15600/28395 [1:49:00<01:53, 113.09it/s] 55%|█████▌    | 15630/28395 [1:49:01<01:55, 110.41it/s] 55%|█████▌    | 15660/28395 [1:49:01<01:57, 108.08it/s] 55%|█████▌    | 15690/28395 [1:49:01<01:56, 108.61it/s] 55%|█████▌    | 15720/28395 [1:49:02<02:04, 102.05it/s] 55%|█████▌    | 15750/28395 [1:49:02<02:01, 104.49it/s] 56%|█████▌    | 15780/28395 [1:49:02<01:53, 111.03it/s] 56%|█████▌    | 15810/28395 [1:49:02<01:54, 109.92it/s] 56%|█████▌    | 15840/28395 [1:49:03<01:49, 114.73it/s] 56%|█████▌    | 15870/28395 [1:49:03<01:40, 124.72it/s] 56%|█████▌    | 15900/28395 [1:49:03<01:46, 117.25it/s] 56%|█████▌    | 15930/28395 [1:49:03<01:51, 111.69it/s] 56%|█████▌    | 15960/28395 [1:49:04<01:51, 111.48it/s] 56%|█████▋    | 15990/28395 [1:49:04<01:56, 106.66it/s] 56%|█████▋    | 16020/28395 [1:49:04<01:54, 108.16it/s] 57%|█████▋    | 16050/28395 [1:49:05<01:54, 107.64it/s] 57%|█████▋    | 16080/28395 [1:49:05<01:49, 112.75it/s] 57%|█████▋    | 16110/28395 [1:49:05<01:48, 113.47it/s] 57%|█████▋    | 16140/28395 [1:49:05<01:46, 114.64it/s] 57%|█████▋    | 16170/28395 [1:49:06<01:46, 114.28it/s] 57%|█████▋    | 16200/28395 [1:49:06<01:48, 112.49it/s] 57%|█████▋    | 16230/28395 [1:49:06<01:43, 118.02it/s] 57%|█████▋    | 16260/28395 [1:49:06<01:40, 120.73it/s] 57%|█████▋    | 16290/28395 [1:49:06<01:35, 126.60it/s] 57%|█████▋    | 16320/28395 [1:49:07<01:34, 128.34it/s] 58%|█████▊    | 16350/28395 [1:49:07<01:37, 123.15it/s] 58%|█████▊    | 16380/28395 [1:49:07<01:27, 137.75it/s] 58%|█████▊    | 16410/28395 [1:49:07<01:30, 132.23it/s] 58%|█████▊    | 16440/28395 [1:49:08<01:43, 115.22it/s] 58%|█████▊    | 16470/28395 [1:49:08<01:47, 111.04it/s] 58%|█████▊    | 16500/28395 [1:49:08<01:49, 108.40it/s] 58%|█████▊    | 16530/28395 [1:49:09<01:47, 110.61it/s] 58%|█████▊    | 16560/28395 [1:49:09<01:42, 115.19it/s] 58%|█████▊    | 16590/28395 [1:49:09<01:42, 115.07it/s] 59%|█████▊    | 16620/28395 [1:49:09<01:46, 111.00it/s] 59%|█████▊    | 16650/28395 [1:49:10<01:45, 111.30it/s] 59%|█████▊    | 16680/28395 [1:49:10<01:50, 105.73it/s] 59%|█████▉    | 16710/28395 [1:49:10<01:44, 112.28it/s] 59%|█████▉    | 16740/28395 [1:49:10<01:44, 111.54it/s] 59%|█████▉    | 16770/28395 [1:49:11<01:45, 109.88it/s] 59%|█████▉    | 16800/28395 [1:49:11<01:46, 109.33it/s] 59%|█████▉    | 16830/28395 [1:49:11<01:43, 111.73it/s] 59%|█████▉    | 16860/28395 [1:49:12<01:42, 112.22it/s] 59%|█████▉    | 16890/28395 [1:49:12<01:39, 115.25it/s] 60%|█████▉    | 16920/28395 [1:49:12<01:31, 125.39it/s] 60%|█████▉    | 16950/28395 [1:49:12<01:38, 116.10it/s] 60%|█████▉    | 16980/28395 [1:49:13<01:37, 116.65it/s] 60%|█████▉    | 17010/28395 [1:49:13<01:37, 116.76it/s] 60%|██████    | 17040/28395 [1:49:13<01:35, 119.43it/s] 60%|██████    | 17070/28395 [1:49:13<01:31, 123.12it/s] 60%|██████    | 17100/28395 [1:49:13<01:33, 120.87it/s] 60%|██████    | 17130/28395 [1:49:14<01:35, 118.40it/s] 60%|██████    | 17160/28395 [1:49:14<01:39, 113.28it/s] 61%|██████    | 17190/28395 [1:49:14<01:34, 118.94it/s] 61%|██████    | 17220/28395 [1:49:15<01:33, 120.02it/s] 61%|██████    | 17250/28395 [1:49:15<01:32, 120.10it/s] 61%|██████    | 17280/28395 [1:49:15<01:31, 121.66it/s] 61%|██████    | 17310/28395 [1:49:15<01:33, 118.10it/s] 61%|██████    | 17340/28395 [1:49:16<01:35, 115.85it/s] 61%|██████    | 17370/28395 [1:49:16<01:40, 109.99it/s] 61%|██████▏   | 17400/28395 [1:49:16<01:35, 115.52it/s] 61%|██████▏   | 17430/28395 [1:49:16<01:31, 119.75it/s] 61%|██████▏   | 17460/28395 [1:49:17<01:33, 117.03it/s] 62%|██████▏   | 17490/28395 [1:49:17<01:32, 117.27it/s] 62%|██████▏   | 17520/28395 [1:49:17<01:34, 115.49it/s] 62%|██████▏   | 17550/28395 [1:49:17<01:30, 119.29it/s] 62%|██████▏   | 17580/28395 [1:49:18<01:36, 112.45it/s] 62%|██████▏   | 17610/28395 [1:49:18<01:33, 115.09it/s] 62%|██████▏   | 17640/28395 [1:49:18<01:32, 116.20it/s] 62%|██████▏   | 17670/28395 [1:49:18<01:37, 109.75it/s] 62%|██████▏   | 17700/28395 [1:49:19<01:31, 117.44it/s] 62%|██████▏   | 17730/28395 [1:49:19<01:30, 117.64it/s] 63%|██████▎   | 17760/28395 [1:49:19<01:26, 122.63it/s] 63%|██████▎   | 17790/28395 [1:49:19<01:34, 112.53it/s] 63%|██████▎   | 17820/28395 [1:49:20<01:46, 99.03it/s]  63%|██████▎   | 17850/28395 [1:49:20<01:41, 103.64it/s] 63%|██████▎   | 17880/28395 [1:49:20<01:43, 101.51it/s] 63%|██████▎   | 17910/28395 [1:49:21<01:39, 105.33it/s] 63%|██████▎   | 17940/28395 [1:49:21<01:37, 107.72it/s] 63%|██████▎   | 17970/28395 [1:49:21<01:38, 105.32it/s] 63%|██████▎   | 18000/28395 [1:49:22<01:38, 105.18it/s] 63%|██████▎   | 18030/28395 [1:49:22<02:28, 69.67it/s]  64%|██████▎   | 18060/28395 [1:49:23<02:12, 77.83it/s] 64%|██████▎   | 18090/28395 [1:49:23<02:02, 84.41it/s] 64%|██████▍   | 18120/28395 [1:49:23<01:50, 92.59it/s] 64%|██████▍   | 18150/28395 [1:49:23<01:43, 98.76it/s] 64%|██████▍   | 18180/28395 [1:49:24<01:40, 101.77it/s] 64%|██████▍   | 18210/28395 [1:49:24<01:42, 98.98it/s]  64%|██████▍   | 18240/28395 [1:49:24<01:38, 103.08it/s] 64%|██████▍   | 18270/28395 [1:49:24<01:32, 108.88it/s] 64%|██████▍   | 18300/28395 [1:49:25<01:39, 101.47it/s] 65%|██████▍   | 18330/28395 [1:49:25<01:40, 100.28it/s] 65%|██████▍   | 18360/28395 [1:49:25<01:31, 109.39it/s] 65%|██████▍   | 18390/28395 [1:49:26<01:47, 93.11it/s]  65%|██████▍   | 18420/28395 [1:49:26<01:38, 101.49it/s] 65%|██████▍   | 18450/28395 [1:49:26<01:35, 104.08it/s] 65%|██████▌   | 18480/28395 [1:49:27<01:31, 108.68it/s] 65%|██████▌   | 18510/28395 [1:49:27<01:28, 112.06it/s] 65%|██████▌   | 18540/28395 [1:49:27<01:33, 105.67it/s] 65%|██████▌   | 18570/28395 [1:49:27<01:33, 104.87it/s] 66%|██████▌   | 18600/28395 [1:49:28<01:31, 106.58it/s] 66%|██████▌   | 18630/28395 [1:49:28<01:28, 110.45it/s] 66%|██████▌   | 18660/28395 [1:49:28<01:26, 111.99it/s] 66%|██████▌   | 18690/28395 [1:49:28<01:25, 113.18it/s] 66%|██████▌   | 18720/28395 [1:49:29<01:26, 112.39it/s] 66%|██████▌   | 18750/28395 [1:49:29<01:24, 114.44it/s] 66%|██████▌   | 18780/28395 [1:49:29<01:27, 109.50it/s] 66%|██████▌   | 18810/28395 [1:49:30<01:33, 102.02it/s] 66%|██████▋   | 18840/28395 [1:49:30<01:31, 104.94it/s] 66%|██████▋   | 18870/28395 [1:49:30<01:31, 104.27it/s] 67%|██████▋   | 18900/28395 [1:49:30<01:30, 104.69it/s] 67%|██████▋   | 18930/28395 [1:49:31<01:28, 106.83it/s] 67%|██████▋   | 18960/28395 [1:49:31<01:25, 110.71it/s] 67%|██████▋   | 18990/28395 [1:49:31<01:27, 107.74it/s] 67%|██████▋   | 19020/28395 [1:49:31<01:26, 109.00it/s] 67%|██████▋   | 19050/28395 [1:49:32<01:29, 104.93it/s] 67%|██████▋   | 19080/28395 [1:49:32<01:29, 103.76it/s] 67%|██████▋   | 19110/28395 [1:49:32<01:25, 108.79it/s] 67%|██████▋   | 19140/28395 [1:49:33<01:24, 109.36it/s] 68%|██████▊   | 19170/28395 [1:49:33<01:22, 112.44it/s] 68%|██████▊   | 19200/28395 [1:49:33<01:26, 106.19it/s] 68%|██████▊   | 19230/28395 [1:49:33<01:23, 110.04it/s] 68%|██████▊   | 19260/28395 [1:49:34<01:21, 112.72it/s] 68%|██████▊   | 19290/28395 [1:49:34<01:21, 111.22it/s] 68%|██████▊   | 19320/28395 [1:49:34<01:20, 113.10it/s] 68%|██████▊   | 19350/28395 [1:49:34<01:19, 114.04it/s] 68%|██████▊   | 19380/28395 [1:49:35<01:16, 117.82it/s] 68%|██████▊   | 19410/28395 [1:49:35<01:16, 117.70it/s] 68%|██████▊   | 19440/28395 [1:49:35<01:18, 113.91it/s] 69%|██████▊   | 19470/28395 [1:49:36<01:19, 111.88it/s] 69%|██████▊   | 19500/28395 [1:49:36<01:10, 125.67it/s] 69%|██████▉   | 19530/28395 [1:49:36<01:01, 144.48it/s] 69%|██████▉   | 19560/28395 [1:49:36<01:13, 119.82it/s] 69%|██████▉   | 19590/28395 [1:49:37<01:32, 94.85it/s]  69%|██████▉   | 19620/28395 [1:49:37<01:31, 95.38it/s] 69%|██████▉   | 19650/28395 [1:49:37<01:26, 100.74it/s] 69%|██████▉   | 19680/28395 [1:49:37<01:22, 105.67it/s] 69%|██████▉   | 19710/28395 [1:49:38<01:20, 108.53it/s] 70%|██████▉   | 19740/28395 [1:49:38<01:07, 127.45it/s] 70%|██████▉   | 19770/28395 [1:49:38<01:06, 129.39it/s] 70%|██████▉   | 19800/28395 [1:49:38<01:11, 120.62it/s] 70%|██████▉   | 19830/28395 [1:49:39<01:22, 104.01it/s] 70%|██████▉   | 19860/28395 [1:49:39<01:59, 71.44it/s]  70%|███████   | 19890/28395 [1:49:40<02:17, 62.06it/s] 70%|███████   | 19920/28395 [1:49:41<02:28, 57.09it/s] 70%|███████   | 19950/28395 [1:49:41<02:35, 54.35it/s] 70%|███████   | 19980/28395 [1:49:42<02:46, 50.56it/s] 70%|███████   | 20010/28395 [1:49:43<02:50, 49.30it/s] 71%|███████   | 20040/28395 [1:49:43<02:36, 53.24it/s] 71%|███████   | 20070/28395 [1:49:44<02:47, 49.82it/s] 71%|███████   | 20100/28395 [1:49:45<02:51, 48.38it/s] 71%|███████   | 20130/28395 [1:49:45<03:01, 45.65it/s] 71%|███████   | 20160/28395 [1:49:46<02:50, 48.19it/s] 71%|███████   | 20190/28395 [1:49:47<02:57, 46.11it/s] 71%|███████   | 20220/28395 [1:49:47<02:50, 48.05it/s] 71%|███████▏  | 20250/28395 [1:49:48<02:45, 49.21it/s] 71%|███████▏  | 20280/28395 [1:49:48<02:38, 51.06it/s] 72%|███████▏  | 20310/28395 [1:49:49<02:25, 55.59it/s] 72%|███████▏  | 20340/28395 [1:49:49<02:25, 55.47it/s] 72%|███████▏  | 20370/28395 [1:49:50<02:28, 53.97it/s] 72%|███████▏  | 20400/28395 [1:49:50<02:26, 54.64it/s] 72%|███████▏  | 20430/28395 [1:49:51<02:26, 54.40it/s] 72%|███████▏  | 20460/28395 [1:49:51<02:29, 53.18it/s] 72%|███████▏  | 20490/28395 [1:49:52<02:31, 52.07it/s] 72%|███████▏  | 20520/28395 [1:49:53<02:28, 52.96it/s] 72%|███████▏  | 20550/28395 [1:49:53<02:19, 56.28it/s] 72%|███████▏  | 20580/28395 [1:49:54<02:25, 53.79it/s] 73%|███████▎  | 20610/28395 [1:49:54<02:32, 50.92it/s] 73%|███████▎  | 20640/28395 [1:49:55<02:22, 54.58it/s] 73%|███████▎  | 20670/28395 [1:49:55<02:23, 53.87it/s] 73%|███████▎  | 20700/28395 [1:49:56<02:22, 53.93it/s] 73%|███████▎  | 20730/28395 [1:49:56<02:25, 52.68it/s] 73%|███████▎  | 20760/28395 [1:49:57<02:27, 51.65it/s] 73%|███████▎  | 20790/28395 [1:49:58<02:25, 52.36it/s] 73%|███████▎  | 20820/28395 [1:49:58<02:25, 52.07it/s] 73%|███████▎  | 20850/28395 [1:49:59<02:28, 50.96it/s] 74%|███████▎  | 20880/28395 [1:50:00<02:32, 49.40it/s] 74%|███████▎  | 20910/28395 [1:50:00<02:30, 49.73it/s] 74%|███████▎  | 20940/28395 [1:50:01<02:27, 50.49it/s] 74%|███████▍  | 20970/28395 [1:50:01<02:28, 50.16it/s] 74%|███████▍  | 21000/28395 [1:50:02<02:31, 48.85it/s] 74%|███████▍  | 21030/28395 [1:50:02<02:25, 50.50it/s] 74%|███████▍  | 21060/28395 [1:50:03<02:32, 48.15it/s] 74%|███████▍  | 21090/28395 [1:50:04<02:18, 52.69it/s] 74%|███████▍  | 21120/28395 [1:50:04<02:40, 45.33it/s] 74%|███████▍  | 21150/28395 [1:50:05<02:21, 51.15it/s] 75%|███████▍  | 21180/28395 [1:50:05<02:14, 53.63it/s] 75%|███████▍  | 21210/28395 [1:50:06<02:04, 57.86it/s] 75%|███████▍  | 21240/28395 [1:50:06<02:06, 56.56it/s] 75%|███████▍  | 21270/28395 [1:50:07<02:02, 58.04it/s] 75%|███████▌  | 21300/28395 [1:50:07<02:02, 57.93it/s] 75%|███████▌  | 21330/28395 [1:50:08<02:03, 57.10it/s] 75%|███████▌  | 21360/28395 [1:50:08<02:03, 57.05it/s] 75%|███████▌  | 21390/28395 [1:50:09<01:53, 61.68it/s] 75%|███████▌  | 21420/28395 [1:50:09<01:50, 63.03it/s] 76%|███████▌  | 21450/28395 [1:50:10<01:49, 63.70it/s] 76%|███████▌  | 21480/28395 [1:50:10<01:54, 60.19it/s] 76%|███████▌  | 21510/28395 [1:50:11<01:50, 62.38it/s] 76%|███████▌  | 21540/28395 [1:50:11<01:44, 65.44it/s] 76%|███████▌  | 21570/28395 [1:50:12<01:41, 67.20it/s] 76%|███████▌  | 21600/28395 [1:50:12<01:43, 65.77it/s] 76%|███████▌  | 21630/28395 [1:50:13<01:42, 65.86it/s] 76%|███████▋  | 21660/28395 [1:50:13<01:41, 66.51it/s] 76%|███████▋  | 21690/28395 [1:50:13<01:38, 68.34it/s] 76%|███████▋  | 21720/28395 [1:50:14<01:40, 66.46it/s] 77%|███████▋  | 21727/28395 [1:50:15<02:29, 44.55it/s] 77%|███████▋  | 21750/28395 [1:50:15<01:58, 55.89it/s] 77%|███████▋  | 21780/28395 [1:50:15<01:32, 71.42it/s] 77%|███████▋  | 21810/28395 [1:50:15<01:21, 80.84it/s] 77%|███████▋  | 21840/28395 [1:50:16<01:20, 81.64it/s] 77%|███████▋  | 21870/28395 [1:50:16<01:15, 86.77it/s] 77%|███████▋  | 21900/28395 [1:50:16<01:08, 94.22it/s] 77%|███████▋  | 21930/28395 [1:50:16<01:08, 94.13it/s] 77%|███████▋  | 21960/28395 [1:50:17<01:10, 91.90it/s] 77%|███████▋  | 21990/28395 [1:50:17<01:14, 86.03it/s] 78%|███████▊  | 22020/28395 [1:50:17<01:00, 104.86it/s] 78%|███████▊  | 22050/28395 [1:50:18<01:11, 88.34it/s]  78%|███████▊  | 22080/28395 [1:50:18<01:16, 82.17it/s] 78%|███████▊  | 22110/28395 [1:50:19<01:32, 68.31it/s] 78%|███████▊  | 22140/28395 [1:50:19<01:27, 71.25it/s] 78%|███████▊  | 22170/28395 [1:50:20<01:28, 70.55it/s] 78%|███████▊  | 22200/28395 [1:50:20<01:36, 63.95it/s] 78%|███████▊  | 22230/28395 [1:50:21<01:36, 64.19it/s] 78%|███████▊  | 22260/28395 [1:50:21<01:36, 63.68it/s] 78%|███████▊  | 22290/28395 [1:50:22<01:33, 65.20it/s] 79%|███████▊  | 22320/28395 [1:50:22<01:26, 70.08it/s] 79%|███████▊  | 22350/28395 [1:50:22<01:32, 65.27it/s] 79%|███████▉  | 22380/28395 [1:50:23<01:23, 72.45it/s] 79%|███████▉  | 22410/28395 [1:50:23<01:18, 76.16it/s] 79%|███████▉  | 22440/28395 [1:50:24<01:29, 66.89it/s] 79%|███████▉  | 22470/28395 [1:50:24<01:23, 70.57it/s] 79%|███████▉  | 22500/28395 [1:50:25<01:24, 69.46it/s] 79%|███████▉  | 22530/28395 [1:50:25<01:22, 70.91it/s] 79%|███████▉  | 22560/28395 [1:50:25<01:07, 86.31it/s] 80%|███████▉  | 22590/28395 [1:50:25<01:02, 93.12it/s] 80%|███████▉  | 22620/28395 [1:50:26<01:05, 87.70it/s] 80%|███████▉  | 22650/28395 [1:50:26<00:59, 96.74it/s] 80%|███████▉  | 22680/28395 [1:50:26<00:59, 96.22it/s] 80%|███████▉  | 22710/28395 [1:50:27<00:55, 102.66it/s] 80%|████████  | 22740/28395 [1:50:27<00:58, 96.22it/s]  80%|████████  | 22770/28395 [1:50:27<01:00, 93.68it/s] 80%|████████  | 22800/28395 [1:50:28<00:58, 96.10it/s] 80%|████████  | 22830/28395 [1:50:28<01:00, 91.93it/s] 81%|████████  | 22860/28395 [1:50:28<00:57, 96.09it/s] 81%|████████  | 22890/28395 [1:50:28<00:46, 119.30it/s] 81%|████████  | 22920/28395 [1:50:29<00:49, 111.61it/s] 81%|████████  | 22950/28395 [1:50:29<00:49, 109.97it/s] 81%|████████  | 22980/28395 [1:50:29<00:49, 108.70it/s] 81%|████████  | 23010/28395 [1:50:29<00:46, 114.97it/s] 81%|████████  | 23040/28395 [1:50:30<00:50, 105.96it/s] 81%|████████  | 23070/28395 [1:50:30<00:50, 104.71it/s] 81%|████████▏ | 23100/28395 [1:50:30<00:54, 97.01it/s]  81%|████████▏ | 23130/28395 [1:50:31<00:52, 100.70it/s] 82%|████████▏ | 23160/28395 [1:50:31<00:48, 108.29it/s] 82%|████████▏ | 23190/28395 [1:50:31<00:47, 109.15it/s] 82%|████████▏ | 23220/28395 [1:50:31<00:49, 104.51it/s] 82%|████████▏ | 23250/28395 [1:50:32<00:45, 112.23it/s] 82%|████████▏ | 23280/28395 [1:50:32<00:44, 114.13it/s] 82%|████████▏ | 23310/28395 [1:50:32<00:46, 109.39it/s] 82%|████████▏ | 23340/28395 [1:50:33<00:47, 106.52it/s] 82%|████████▏ | 23370/28395 [1:50:33<00:47, 106.49it/s] 82%|████████▏ | 23400/28395 [1:50:33<00:46, 106.40it/s] 83%|████████▎ | 23430/28395 [1:50:33<00:52, 95.17it/s]  83%|████████▎ | 23460/28395 [1:50:34<00:52, 93.40it/s] 83%|████████▎ | 23490/28395 [1:50:34<00:46, 104.91it/s] 83%|████████▎ | 23520/28395 [1:50:34<00:38, 128.11it/s] 83%|████████▎ | 23550/28395 [1:50:34<00:41, 115.57it/s] 83%|████████▎ | 23580/28395 [1:50:35<00:43, 109.64it/s] 83%|████████▎ | 23610/28395 [1:50:35<00:46, 103.58it/s] 83%|████████▎ | 23640/28395 [1:50:35<00:46, 102.69it/s] 83%|████████▎ | 23670/28395 [1:50:36<00:50, 93.74it/s]  83%|████████▎ | 23700/28395 [1:50:36<00:50, 92.70it/s] 84%|████████▎ | 23730/28395 [1:50:36<00:46, 100.24it/s] 84%|████████▎ | 23760/28395 [1:50:37<00:48, 94.86it/s]  84%|████████▍ | 23790/28395 [1:50:37<00:47, 96.59it/s] 84%|████████▍ | 23820/28395 [1:50:37<00:44, 101.96it/s] 84%|████████▍ | 23850/28395 [1:50:37<00:42, 106.08it/s] 84%|████████▍ | 23880/28395 [1:50:38<00:38, 117.73it/s] 84%|████████▍ | 23910/28395 [1:50:38<00:41, 108.77it/s] 84%|████████▍ | 23940/28395 [1:50:38<00:40, 109.04it/s] 84%|████████▍ | 23970/28395 [1:50:39<00:40, 109.51it/s] 85%|████████▍ | 24000/28395 [1:50:39<00:39, 111.54it/s] 85%|████████▍ | 24030/28395 [1:50:39<00:36, 120.75it/s] 85%|████████▍ | 24060/28395 [1:50:39<00:38, 113.25it/s] 85%|████████▍ | 24090/28395 [1:50:40<00:36, 116.68it/s] 85%|████████▍ | 24120/28395 [1:50:40<00:34, 122.64it/s] 85%|████████▌ | 24150/28395 [1:50:40<00:34, 123.64it/s] 85%|████████▌ | 24180/28395 [1:50:40<00:34, 122.99it/s] 85%|████████▌ | 24210/28395 [1:50:40<00:32, 128.36it/s] 85%|████████▌ | 24240/28395 [1:50:41<00:32, 125.97it/s] 85%|████████▌ | 24270/28395 [1:50:41<00:31, 129.46it/s] 86%|████████▌ | 24300/28395 [1:50:41<00:32, 125.04it/s] 86%|████████▌ | 24330/28395 [1:50:41<00:34, 117.21it/s] 86%|████████▌ | 24360/28395 [1:50:42<00:35, 113.19it/s] 86%|████████▌ | 24390/28395 [1:50:42<00:37, 107.33it/s] 86%|████████▌ | 24420/28395 [1:50:42<00:35, 111.49it/s] 86%|████████▌ | 24450/28395 [1:50:43<00:35, 110.39it/s] 86%|████████▌ | 24480/28395 [1:50:43<00:35, 108.95it/s] 86%|████████▋ | 24510/28395 [1:50:43<00:34, 112.53it/s] 86%|████████▋ | 24540/28395 [1:50:43<00:31, 122.76it/s] 87%|████████▋ | 24570/28395 [1:50:44<00:30, 126.24it/s] 87%|████████▋ | 24600/28395 [1:50:44<00:30, 122.80it/s] 87%|████████▋ | 24630/28395 [1:50:44<00:31, 120.94it/s] 87%|████████▋ | 24660/28395 [1:50:44<00:31, 117.58it/s] 87%|████████▋ | 24690/28395 [1:50:45<00:31, 118.80it/s] 87%|████████▋ | 24720/28395 [1:50:45<00:31, 117.23it/s] 87%|████████▋ | 24750/28395 [1:50:45<00:31, 116.19it/s] 87%|████████▋ | 24780/28395 [1:50:45<00:31, 115.17it/s] 87%|████████▋ | 24810/28395 [1:50:46<00:30, 115.99it/s] 87%|████████▋ | 24840/28395 [1:50:46<00:29, 119.34it/s] 88%|████████▊ | 24870/28395 [1:50:46<00:30, 116.19it/s] 88%|████████▊ | 24900/28395 [1:50:46<00:29, 119.01it/s] 88%|████████▊ | 24930/28395 [1:50:47<00:28, 120.48it/s] 88%|████████▊ | 24960/28395 [1:50:47<00:26, 127.89it/s] 88%|████████▊ | 24990/28395 [1:50:47<00:26, 129.85it/s] 88%|████████▊ | 25020/28395 [1:50:47<00:25, 134.52it/s] 88%|████████▊ | 25050/28395 [1:50:48<00:26, 128.41it/s] 88%|████████▊ | 25080/28395 [1:50:48<00:27, 122.02it/s] 88%|████████▊ | 25110/28395 [1:50:48<00:28, 116.97it/s] 89%|████████▊ | 25140/28395 [1:50:48<00:29, 112.00it/s] 89%|████████▊ | 25170/28395 [1:50:49<00:29, 110.03it/s] 89%|████████▊ | 25200/28395 [1:50:49<00:28, 112.49it/s] 89%|████████▉ | 25230/28395 [1:50:49<00:27, 113.41it/s] 89%|████████▉ | 25260/28395 [1:50:49<00:27, 113.24it/s] 89%|████████▉ | 25290/28395 [1:50:50<00:25, 121.34it/s] 89%|████████▉ | 25320/28395 [1:50:50<00:25, 122.41it/s] 89%|████████▉ | 25350/28395 [1:50:50<00:25, 118.43it/s] 89%|████████▉ | 25380/28395 [1:50:50<00:25, 120.41it/s] 89%|████████▉ | 25410/28395 [1:50:51<00:26, 113.83it/s] 90%|████████▉ | 25440/28395 [1:50:51<00:25, 114.33it/s] 90%|████████▉ | 25470/28395 [1:50:51<00:24, 117.72it/s] 90%|████████▉ | 25500/28395 [1:50:51<00:24, 117.83it/s] 90%|████████▉ | 25530/28395 [1:50:52<00:24, 117.26it/s] 90%|█████████ | 25560/28395 [1:50:52<00:24, 114.06it/s] 90%|█████████ | 25590/28395 [1:50:52<00:25, 111.91it/s] 90%|█████████ | 25620/28395 [1:50:53<00:24, 112.33it/s] 90%|█████████ | 25650/28395 [1:50:53<00:24, 114.30it/s] 90%|█████████ | 25680/28395 [1:50:53<00:24, 111.73it/s] 91%|█████████ | 25710/28395 [1:50:53<00:23, 116.21it/s] 91%|█████████ | 25740/28395 [1:50:54<00:22, 118.75it/s] 91%|█████████ | 25770/28395 [1:50:54<00:21, 119.67it/s] 91%|█████████ | 25800/28395 [1:50:54<00:24, 106.81it/s] 91%|█████████ | 25830/28395 [1:50:54<00:24, 104.86it/s] 91%|█████████ | 25860/28395 [1:50:55<00:23, 110.10it/s] 91%|█████████ | 25890/28395 [1:50:55<00:21, 115.84it/s] 91%|█████████▏| 25920/28395 [1:50:55<00:20, 117.93it/s] 91%|█████████▏| 25950/28395 [1:50:55<00:20, 118.86it/s] 91%|█████████▏| 25980/28395 [1:50:56<00:20, 119.55it/s] 92%|█████████▏| 26010/28395 [1:50:56<00:20, 117.34it/s] 92%|█████████▏| 26040/28395 [1:50:56<00:20, 115.29it/s] 92%|█████████▏| 26070/28395 [1:50:57<00:33, 69.56it/s]  92%|█████████▏| 26100/28395 [1:50:57<00:29, 77.60it/s] 92%|█████████▏| 26130/28395 [1:50:58<00:26, 86.41it/s] 92%|█████████▏| 26160/28395 [1:50:58<00:24, 90.46it/s] 92%|█████████▏| 26190/28395 [1:50:58<00:22, 99.08it/s] 92%|█████████▏| 26220/28395 [1:50:58<00:20, 104.20it/s] 92%|█████████▏| 26250/28395 [1:50:59<00:19, 109.55it/s] 93%|█████████▎| 26280/28395 [1:50:59<00:19, 108.08it/s] 93%|█████████▎| 26310/28395 [1:50:59<00:18, 111.06it/s] 93%|█████████▎| 26340/28395 [1:50:59<00:18, 113.11it/s] 93%|█████████▎| 26370/28395 [1:51:00<00:18, 108.67it/s] 93%|█████████▎| 26400/28395 [1:51:00<00:18, 108.33it/s] 93%|█████████▎| 26430/28395 [1:51:00<00:17, 110.42it/s] 93%|█████████▎| 26460/28395 [1:51:00<00:18, 107.26it/s] 93%|█████████▎| 26490/28395 [1:51:01<00:17, 111.20it/s] 93%|█████████▎| 26520/28395 [1:51:01<00:16, 113.66it/s] 94%|█████████▎| 26550/28395 [1:51:01<00:16, 113.54it/s] 94%|█████████▎| 26580/28395 [1:51:02<00:15, 113.89it/s] 94%|█████████▎| 26610/28395 [1:51:02<00:16, 109.76it/s] 94%|█████████▍| 26640/28395 [1:51:02<00:16, 108.85it/s] 94%|█████████▍| 26670/28395 [1:51:02<00:15, 110.99it/s] 94%|█████████▍| 26700/28395 [1:51:03<00:15, 109.84it/s] 94%|█████████▍| 26730/28395 [1:51:03<00:14, 111.60it/s] 94%|█████████▍| 26760/28395 [1:51:03<00:14, 113.58it/s] 94%|█████████▍| 26790/28395 [1:51:03<00:14, 111.48it/s] 94%|█████████▍| 26820/28395 [1:51:04<00:13, 113.87it/s] 95%|█████████▍| 26850/28395 [1:51:04<00:13, 114.91it/s] 95%|█████████▍| 26880/28395 [1:51:04<00:12, 120.38it/s] 95%|█████████▍| 26910/28395 [1:51:04<00:12, 119.23it/s] 95%|█████████▍| 26940/28395 [1:51:05<00:12, 118.15it/s] 95%|█████████▍| 26970/28395 [1:51:05<00:11, 120.57it/s] 95%|█████████▌| 27000/28395 [1:51:05<00:11, 123.30it/s] 95%|█████████▌| 27030/28395 [1:51:05<00:11, 120.70it/s] 95%|█████████▌| 27060/28395 [1:51:06<00:11, 116.50it/s] 95%|█████████▌| 27090/28395 [1:51:06<00:11, 112.14it/s] 96%|█████████▌| 27120/28395 [1:51:06<00:12, 106.03it/s] 96%|█████████▌| 27150/28395 [1:51:07<00:11, 109.57it/s] 96%|█████████▌| 27180/28395 [1:51:07<00:11, 109.16it/s] 96%|█████████▌| 27210/28395 [1:51:07<00:10, 108.39it/s] 96%|█████████▌| 27240/28395 [1:51:07<00:10, 106.39it/s] 96%|█████████▌| 27270/28395 [1:51:08<00:10, 110.82it/s] 96%|█████████▌| 27300/28395 [1:51:08<00:09, 114.93it/s] 96%|█████████▌| 27330/28395 [1:51:08<00:08, 119.02it/s] 96%|█████████▋| 27360/28395 [1:51:08<00:09, 114.14it/s] 96%|█████████▋| 27390/28395 [1:51:09<00:08, 115.52it/s] 97%|█████████▋| 27420/28395 [1:51:09<00:07, 124.52it/s] 97%|█████████▋| 27450/28395 [1:51:09<00:07, 123.43it/s] 97%|█████████▋| 27480/28395 [1:51:09<00:07, 118.81it/s] 97%|█████████▋| 27510/28395 [1:51:10<00:07, 117.19it/s] 97%|█████████▋| 27540/28395 [1:51:10<00:07, 116.77it/s] 97%|█████████▋| 27570/28395 [1:51:10<00:07, 116.53it/s] 97%|█████████▋| 27600/28395 [1:51:10<00:07, 112.63it/s] 97%|█████████▋| 27630/28395 [1:51:11<00:06, 113.14it/s] 97%|█████████▋| 27660/28395 [1:51:11<00:06, 111.24it/s] 98%|█████████▊| 27690/28395 [1:51:11<00:06, 113.77it/s] 98%|█████████▊| 27720/28395 [1:51:11<00:05, 113.92it/s] 98%|█████████▊| 27750/28395 [1:51:12<00:05, 115.46it/s] 98%|█████████▊| 27780/28395 [1:51:12<00:05, 113.97it/s] 98%|█████████▊| 27810/28395 [1:51:12<00:05, 115.72it/s] 98%|█████████▊| 27840/28395 [1:51:12<00:04, 117.63it/s] 98%|█████████▊| 27870/28395 [1:51:13<00:04, 119.44it/s] 98%|█████████▊| 27900/28395 [1:51:13<00:04, 118.05it/s] 98%|█████████▊| 27930/28395 [1:51:13<00:03, 120.55it/s] 98%|█████████▊| 27960/28395 [1:51:14<00:03, 114.53it/s] 99%|█████████▊| 27990/28395 [1:51:14<00:03, 114.55it/s] 99%|█████████▊| 28020/28395 [1:51:14<00:03, 113.46it/s] 99%|█████████▉| 28050/28395 [1:51:14<00:02, 115.71it/s] 99%|█████████▉| 28080/28395 [1:51:15<00:02, 113.41it/s] 99%|█████████▉| 28110/28395 [1:51:15<00:02, 109.97it/s] 99%|█████████▉| 28140/28395 [1:51:15<00:02, 111.04it/s] 99%|█████████▉| 28170/28395 [1:51:15<00:01, 112.72it/s] 99%|█████████▉| 28200/28395 [1:51:16<00:01, 114.03it/s] 99%|█████████▉| 28230/28395 [1:51:16<00:01, 116.58it/s]100%|█████████▉| 28260/28395 [1:51:16<00:01, 119.07it/s]100%|█████████▉| 28290/28395 [1:51:16<00:00, 124.90it/s]100%|█████████▉| 28320/28395 [1:51:17<00:00, 126.74it/s]100%|█████████▉| 28350/28395 [1:51:17<00:00, 129.42it/s]100%|█████████▉| 28380/28395 [1:51:17<00:00, 118.60it/s]100%|██████████| 28395/28395 [1:51:17<00:00,  4.25it/s]
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:100: ConvergenceWarning: Number of distinct clusters (1) found smaller than n_clusters (2). Possibly due to duplicate points in X.
  kmeans = KMeans(n_clusters=K, random_state=0, n_init=5, max_iter=100).fit(emb)
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
eval-community-kmeans.py:130: RuntimeWarning: divide by zero encountered in true_divide
  X = np.einsum("ij,i->ij", X, 1 / np.linalg.norm(X, axis=1))
