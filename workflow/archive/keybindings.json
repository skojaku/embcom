// Override key bindings by placing them into your key bindings file.
[
    {
        "key": "escape escape",
        "command": "workbench.action.exitZenMode",
        "when": "inZenMode"
    },
    {
        "key": "shift+escape",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "shift+escape",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "escape",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "cmd+down",
        "command": "cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "shift+cmd+down",
        "command": "cursorBottomSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+down",
        "command": "cursorColumnSelectDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+left",
        "command": "cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+pagedown",
        "command": "cursorColumnSelectPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+pageup",
        "command": "cursorColumnSelectPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+right",
        "command": "cursorColumnSelectRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+up",
        "command": "cursorColumnSelectUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "down",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+down",
        "command": "cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+right",
        "command": "cursorEnd",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "end",
        "command": "cursorEnd",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "shift+cmd+right",
        "command": "cursorEndSelect",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "shift+end",
        "command": "cursorEndSelect",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "cmd+left",
        "command": "cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "home",
        "command": "cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "shift+cmd+left",
        "command": "cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+home",
        "command": "cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "left",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "cursorLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "cursorLineEnd",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+e",
        "command": "cursorLineEndSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "cursorLineStart",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+a",
        "command": "cursorLineStartSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "cursorPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "cursorPageDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pageup",
        "command": "cursorPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "cursorPageUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "right",
        "command": "cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "cursorRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+up",
        "command": "cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "shift+cmd+up",
        "command": "cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "up",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+h",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+delete",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+d",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "delete",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+a",
        "command": "editor.action.selectAll"
    },
    {
        "key": "cmd+c",
        "command": "execCopy"
    },
    {
        "key": "cmd+x",
        "command": "execCut"
    },
    {
        "key": "cmd+v",
        "command": "execPaste"
    },
    {
        "key": "cmd+l",
        "command": "expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+o",
        "command": "lineBreakInsert",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+tab",
        "command": "outdent",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "shift+cmd+z",
        "command": "redo"
    },
    {
        "key": "ctrl+pagedown",
        "command": "scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+pageup",
        "command": "scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+pagedown",
        "command": "scrollPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+pageup",
        "command": "scrollPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "tab",
        "command": "tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "cmd+z",
        "command": "undo"
    },
    {
        "key": "shift+down",
        "command": "cursorColumnSelectDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "cursorColumnSelectLeft",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "cursorColumnSelectPageDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "cursorColumnSelectPageUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "cursorColumnSelectRight",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "cursorColumnSelectUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "escape",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "f12",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f12",
        "command": "goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f4",
        "command": "goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+enter",
        "command": "refactorPreview.apply",
        "when": "refactorPreview.enabled && refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
    },
    {
        "key": "escape",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasSelection && !editorHoverVisible"
    },
    {
        "key": "cmd+f",
        "command": "actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "cmd+e",
        "command": "actions.findWithSelection"
    },
    {
        "key": "enter",
        "command": "breakpointWidget.action.acceptInput",
        "when": "breakpointWidgetVisible && inBreakpointWidget"
    },
    {
        "key": "shift+escape",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "cmd+u",
        "command": "cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "alt+right",
        "command": "cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "cursorWordEndRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+left",
        "command": "cursorWordLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+left",
        "command": "cursorWordPartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "cursorWordPartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+right",
        "command": "cursorWordPartRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "cursorWordPartRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "deleteAllLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "cmd+delete",
        "command": "deleteAllRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k",
        "command": "deleteAllRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+backspace",
        "command": "deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "deleteWordPartLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+delete",
        "command": "deleteWordPartRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+delete",
        "command": "deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "cmd+k cmd+c",
        "command": "editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+.",
        "command": "editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "shift+alt+a",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "editor.action.cancelSelectionAnchor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "cmd+f2",
        "command": "editor.action.changeAll",
        "when": "editorTextFocus && editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+c",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "cmd+x",
        "command": "editor.action.clipboardCutAction"
    },
    {
        "key": "cmd+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "cmd+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+k cmd+k",
        "command": "editor.action.defineKeybinding",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
    },
    {
        "key": "shift+cmd+k",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "f7",
        "command": "editor.action.diffReview.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f7",
        "command": "editor.action.diffReview.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+f3",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f3",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "enter",
        "command": "editor.action.extensioneditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.extensioneditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "cmd+f",
        "command": "editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "cmd+k cmd+f",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+f12",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f12",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+cmd+.",
        "command": "editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+,",
        "command": "editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+]",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+cmd+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+enter",
        "command": "editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+j",
        "command": "editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+\\",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f8",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "alt+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+k cmd+d",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "f3",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+g",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "enter",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "cmd+f3",
        "command": "editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+f2",
        "command": "editor.action.onTypeRename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+o",
        "command": "editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "cmd+[",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+f12",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+cmd+f12",
        "command": "editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f3",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+cmd+g",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "shift+cmd+f3",
        "command": "editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "cmd+.",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r",
        "command": "editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+k cmd+u",
        "command": "editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f12",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+k f12",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+k cmd+k",
        "command": "editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "shift+cmd+l",
        "command": "editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "cmd+k cmd+b",
        "command": "editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f1",
        "command": "editor.action.showAccessibilityHelp"
    },
    {
        "key": "shift+f10",
        "command": "editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+k cmd+i",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+right",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+right",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+left",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+left",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+f",
        "command": "editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+shift+m",
        "command": "editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+z",
        "command": "editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+t",
        "command": "editor.action.transposeLetters",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+space",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "cmd+i",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+escape",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "cmd+k cmd+x",
        "command": "editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "editor.action.webvieweditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.webvieweditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "escape",
        "command": "editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "cmd+f",
        "command": "editor.action.webvieweditor.showFind",
        "when": "!editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "f7",
        "command": "editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "escape",
        "command": "editor.cancelOperation",
        "when": "cancellableOperation"
    },
    {
        "key": "cmd+k cmd+i",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "f9",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "tab",
        "command": "editor.emmet.action.expandAbbreviation",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "alt+cmd+[",
        "command": "editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+0",
        "command": "editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+/",
        "command": "editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+8",
        "command": "editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+1",
        "command": "editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+2",
        "command": "editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+3",
        "command": "editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+4",
        "command": "editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+5",
        "command": "editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+6",
        "command": "editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+7",
        "command": "editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+[",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "f12",
        "command": "editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "escape",
        "command": "editor.gotoNextSymbolFromResult.cancel",
        "when": "hasSymbols"
    },
    {
        "key": "cmd+k cmd+l",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+cmd+]",
        "command": "editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+j",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+9",
        "command": "editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "cmd+k cmd+]",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "tab",
        "command": "insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused"
    },
    {
        "key": "alt+enter",
        "command": "notebook.cell.executeAndInsertBelow",
        "when": "notebookCellListFocused"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused"
    },
    {
        "key": "shift+cmd+v",
        "command": "notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "down",
        "command": "notebook.focusNextEditor",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "notebook.focusPreviousEditor",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "shift+alt+f",
        "command": "notebook.formatCell",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+enter",
        "command": "openReferenceToSide",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "enter",
        "command": "repl.action.acceptInput",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "cmd+f",
        "command": "repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "shift+cmd+r",
        "command": "rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+cmd+backspace",
        "command": "search.searchEditor.action.deleteFileResults",
        "when": "inSearchEditor && inSearchEditor"
    },
    {
        "key": "escape",
        "command": "settings.action.clearSearchResults",
        "when": "inSettingsEditor && inSettingsSearch"
    },
    {
        "key": "cmd+.",
        "command": "settings.action.editFocusedSetting",
        "when": "inSettingsSearch"
    },
    {
        "key": "enter",
        "command": "settings.action.focusNextSetting",
        "when": "inSettingsSearch"
    },
    {
        "key": "shift+enter",
        "command": "settings.action.focusPreviousSetting",
        "when": "inSettingsSearch"
    },
    {
        "key": "down",
        "command": "settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "cmd+f",
        "command": "settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "cmd+/",
        "command": "toggleExplainMode",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "cmd+k f2",
        "command": "togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "alt+f5",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f5",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "escape",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "cmd+enter",
        "command": "workbench.action.submitComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "shift+escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "alt+cmd+enter",
        "command": "editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "cmd+enter",
        "command": "editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "shift+cmd+1",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "enter",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.selectAllMatches",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "alt+cmd+c",
        "command": "toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+l",
        "command": "toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+r",
        "command": "toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+cmd+p",
        "command": "togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "tab",
        "command": "jumpToNextSnippetPlaceholder",
        "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
    },
    {
        "key": "shift+tab",
        "command": "jumpToPrevSnippetPlaceholder",
        "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
    },
    {
        "key": "escape",
        "command": "leaveEditorMessage",
        "when": "messageVisible"
    },
    {
        "key": "shift+escape",
        "command": "leaveSnippet",
        "when": "editorTextFocus && inSnippetMode"
    },
    {
        "key": "escape",
        "command": "leaveSnippet",
        "when": "editorTextFocus && inSnippetMode"
    },
    {
        "key": "shift+escape",
        "command": "closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "escape",
        "command": "closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "escape",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "escape",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "ctrl+n",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+down",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "down",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+p",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+up",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "up",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "shift+tab",
        "command": "acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
    },
    {
        "key": "shift+enter",
        "command": "acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
    },
    {
        "key": "tab",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "shift+tab",
        "command": "insertPrevSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "cmd+pagedown",
        "command": "selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "cmd+down",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "down",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "cmd+pageup",
        "command": "selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "pageup",
        "command": "selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "cmd+up",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "up",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+alt+space",
        "command": "toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "acceptRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "shift+enter",
        "command": "acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible"
    },
    {
        "key": "shift+escape",
        "command": "cancelOnTypeRenameInput",
        "when": "editorTextFocus && onTypeRenameInputVisible"
    },
    {
        "key": "escape",
        "command": "cancelOnTypeRenameInput",
        "when": "editorTextFocus && onTypeRenameInputVisible"
    },
    {
        "key": "shift+escape",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "escape",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "shift+cmd+l",
        "command": "addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "shift+cmd+;",
        "command": "breadcrumbs.focus",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "shift+cmd+.",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "alt+right",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "right",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+left",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "left",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "cmd+enter",
        "command": "breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "space",
        "command": "breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "cmd+enter",
        "command": "breadcrumbs.revealFocusedFromTreeAside",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "down",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "enter",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "shift+cmd+.",
        "command": "breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "shift+escape",
        "command": "closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "escape",
        "command": "closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "escape",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    {
        "key": "alt+cmd+c",
        "command": "copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+cmd+c",
        "command": "copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "alt+enter",
        "command": "debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "cmd+enter",
        "command": "debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "cmd+backspace",
        "command": "debug.removeBreakpoint",
        "when": "breakpointsFocused && !breakpointSelected"
    },
    {
        "key": "cmd+backspace",
        "command": "debug.removeWatchExpression",
        "when": "watchExpressionsFocused && !expressionSelected"
    },
    {
        "key": "alt+-",
        "command": "decreaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+f9",
        "command": "editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+enter",
        "command": "editor.refocusCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showIncomingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showOutgoingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
    },
    {
        "key": "ctrl+enter",
        "command": "explorer.openToSide",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "alt+down",
        "command": "history.showNext",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "down",
        "command": "history.showNext",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "alt+up",
        "command": "history.showPrevious",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "up",
        "command": "history.showPrevious",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "alt+=",
        "command": "increaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "keybindings.editor.clearSearchResults",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "cmd+c",
        "command": "keybindings.editor.copyKeybindingEntry",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "cmd+k cmd+k",
        "command": "keybindings.editor.defineKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "cmd+k cmd+e",
        "command": "keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "down",
        "command": "keybindings.editor.focusKeybindings",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+cmd+k",
        "command": "keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "cmd+k cmd+backspace",
        "command": "keybindings.editor.removeKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "cmd+f",
        "command": "keybindings.editor.searchKeybindings",
        "when": "inKeybindings"
    },
    {
        "key": "alt+cmd+p",
        "command": "keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "escape",
        "command": "list.clear",
        "when": "listFocus && listHasSelectionOrFocus && !inputFocus"
    },
    {
        "key": "cmd+up",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "left",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+cmd+up",
        "command": "list.collapseAll",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "cmd+left",
        "command": "list.collapseAll",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "right",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+down",
        "command": "list.expandSelectionDown",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "shift+up",
        "command": "list.expandSelectionUp",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "down",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "home",
        "command": "list.focusFirst",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "end",
        "command": "list.focusLast",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "pagedown",
        "command": "list.focusPageDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "pageup",
        "command": "list.focusPageUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "up",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "cmd+down",
        "command": "list.scrollDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "cmd+up",
        "command": "list.scrollUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "cmd+down",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "cmd+a",
        "command": "list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "space",
        "command": "list.toggleExpand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+cmd+enter",
        "command": "list.toggleSelection",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "y",
        "command": "notebook.cell.changeToCode",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markdown'"
    },
    {
        "key": "m",
        "command": "notebook.cell.changeToMarkdown",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
    },
    {
        "key": "alt+delete",
        "command": "notebook.cell.clearOutputs",
        "when": "notebookCellHasOutputs && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+k cmd+c",
        "command": "notebook.cell.collapseCellContent",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "cmd+k t",
        "command": "notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "shift+alt+down",
        "command": "notebook.cell.copyDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "notebook.cell.copyUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "notebook.cell.delete",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "enter",
        "command": "notebook.cell.edit",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "cmd+k cmd+c",
        "command": "notebook.cell.expandCellContent",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "cmd+k t",
        "command": "notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+cmd+enter",
        "command": "notebook.cell.insertCodeCellAbove",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "cmd+enter",
        "command": "notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+shift+alt+j",
        "command": "notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+j",
        "command": "notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+down",
        "command": "notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "cmd+k shift+cmd+\\",
        "command": "notebook.cell.split",
        "when": "notebookCellEditable && notebookCellEditorFocused && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "ctrl+l",
        "command": "notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "cmd+f",
        "command": "notebook.find",
        "when": "notebookEditorFocused"
    },
    {
        "key": "cmd+down",
        "command": "notebook.focusBottom",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "cmd+up",
        "command": "notebook.focusTop",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "left",
        "command": "notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "alt+cmd+[",
        "command": "notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "notebook.format",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "escape",
        "command": "notebook.hideFind",
        "when": "notebookEditorFocused && notebookFindWidgetFocused"
    },
    {
        "key": "right",
        "command": "notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "alt+cmd+]",
        "command": "notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "cmd+backspace",
        "command": "notification.clear",
        "when": "notificationFocus"
    },
    {
        "key": "left",
        "command": "notification.collapse",
        "when": "notificationFocus"
    },
    {
        "key": "right",
        "command": "notification.expand",
        "when": "notificationFocus"
    },
    {
        "key": "enter",
        "command": "notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "space",
        "command": "notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "home",
        "command": "notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pageup",
        "command": "notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "end",
        "command": "notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pagedown",
        "command": "notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "down",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "up",
        "command": "notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "cmd+c",
        "command": "problems.action.copy",
        "when": "problemFocus"
    },
    {
        "key": "cmd+f",
        "command": "problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "cmd+down",
        "command": "problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "cmd+down",
        "command": "problems.action.open",
        "when": "problemFocus"
    },
    {
        "key": "enter",
        "command": "problems.action.open",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "problems.action.openToSide",
        "when": "problemFocus"
    },
    {
        "key": "cmd+.",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "space",
        "command": "refactorPreview.toggleCheckedState",
        "when": "listFocus && refactorPreview.enabled && !inputFocus"
    },
    {
        "key": "alt+cmd+r",
        "command": "revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "cmd+down",
        "command": "revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "enter",
        "command": "revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "cmd+enter",
        "command": "scm.acceptInput",
        "when": "scmRepository"
    },
    {
        "key": "alt+down",
        "command": "scm.forceViewNextCommit",
        "when": "scmRepository"
    },
    {
        "key": "alt+up",
        "command": "scm.forceViewPreviousCommit",
        "when": "scmRepository"
    },
    {
        "key": "down",
        "command": "scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "escape",
        "command": "search.action.cancel",
        "when": "listFocus && searchViewletVisible && !inputFocus"
    },
    {
        "key": "cmd+c",
        "command": "search.action.copyMatch",
        "when": "fileMatchOrMatchFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "search.action.copyPath",
        "when": "fileMatchOrFolderMatchWithResourceFocus"
    },
    {
        "key": "f4",
        "command": "search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "cmd+up",
        "command": "search.action.focusSearchFromResults",
        "when": "firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "cmd+enter",
        "command": "search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    },
    {
        "key": "cmd+down",
        "command": "search.action.openResult",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "enter",
        "command": "search.action.openResult",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "search.action.openResultToSide",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "cmd+backspace",
        "command": "search.action.remove",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "shift+cmd+1",
        "command": "search.action.replace",
        "when": "matchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "alt+cmd+enter",
        "command": "search.action.replaceAll",
        "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
    },
    {
        "key": "shift+cmd+enter",
        "command": "search.action.replaceAllInFile",
        "when": "fileMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+cmd+1",
        "command": "search.action.replaceAllInFile",
        "when": "fileMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+cmd+enter",
        "command": "search.action.replaceAllInFolder",
        "when": "folderMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+cmd+1",
        "command": "search.action.replaceAllInFolder",
        "when": "folderMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "cmd+down",
        "command": "search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "cmd+up",
        "command": "search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    {
        "key": "shift+cmd+l",
        "command": "selectAllSearchEditorMatches",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "settings.action.focusLevelUp",
        "when": "inSettingsEditor && !inSettingsSearch"
    },
    {
        "key": "enter",
        "command": "settings.action.focusSettingControl",
        "when": "settingRowFocus"
    },
    {
        "key": "down",
        "command": "settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "enter",
        "command": "settings.action.focusSettingsList",
        "when": "inSettingsEditor && settingsTocRowFocus"
    },
    {
        "key": "left",
        "command": "settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "shift+f9",
        "command": "settings.action.showContextMenu",
        "when": "inSettingsEditor"
    },
    {
        "key": "alt+cmd+c",
        "command": "toggleSearchCaseSensitive",
        "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus"
    },
    {
        "key": "alt+cmd+c",
        "command": "toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+l",
        "command": "toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+cmd+r",
        "command": "toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+cmd+p",
        "command": "toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+cmd+r",
        "command": "toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+cmd+w",
        "command": "toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "cmd+k cmd+w",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "cmd+k shift+cmd+w",
        "command": "workbench.action.closeAllGroups"
    },
    {
        "key": "cmd+k w",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "cmd+k f",
        "command": "workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "alt+cmd+t",
        "command": "workbench.action.closeOtherEditors"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "escape",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+k u",
        "command": "workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "shift+cmd+w",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "alt+f5",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "shift+alt+f5",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "f5",
        "command": "workbench.action.debug.continue",
        "when": "inDebugMode"
    },
    {
        "key": "shift+cmd+f5",
        "command": "workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+f5",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable"
    },
    {
        "key": "f5",
        "command": "workbench.action.debug.start",
        "when": "debuggersAvailable && !inDebugMode"
    },
    {
        "key": "shift+f11",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f5",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode"
    },
    {
        "key": "cmd+k m",
        "command": "workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "cmd+k p",
        "command": "workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "cmd+n",
        "command": "workbench.action.files.newUntitledFile"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.files.openFileFolder"
    },
    {
        "key": "cmd+o",
        "command": "workbench.action.files.openLocalFileFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "cmd+k r",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "cmd+s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "alt+cmd+s",
        "command": "workbench.action.files.saveAll"
    },
    {
        "key": "shift+cmd+s",
        "command": "workbench.action.files.saveAs"
    },
    {
        "key": "shift+cmd+s",
        "command": "workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "cmd+k s",
        "command": "workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "cmd+k o",
        "command": "workbench.action.files.showOpenedFileInNewWindow",
        "when": "emptyWorkspaceSupport"
    },
    {
        "key": "shift+cmd+f",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "cmd+k cmd+up",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "cmd+k cmd+down",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "cmd+8",
        "command": "workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "cmd+5",
        "command": "workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "cmd+1",
        "command": "workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "cmd+4",
        "command": "workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "cmd+k cmd+left",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "f6",
        "command": "workbench.action.focusNextPart"
    },
    {
        "key": "shift+f6",
        "command": "workbench.action.focusPreviousPart"
    },
    {
        "key": "cmd+k cmd+right",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "cmd+2",
        "command": "workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "cmd+7",
        "command": "workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "cmd+0",
        "command": "workbench.action.focusSideBar"
    },
    {
        "key": "cmd+6",
        "command": "workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "cmd+3",
        "command": "workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "ctrl+g",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "shift+cmd+o",
        "command": "workbench.action.gotoSymbol"
    },
    {
        "key": "escape",
        "command": "workbench.action.hideInterfaceOverview",
        "when": "interfaceOverviewVisible"
    },
    {
        "key": "down",
        "command": "workbench.action.interactivePlayground.arrowDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "up",
        "command": "workbench.action.interactivePlayground.arrowUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pagedown",
        "command": "workbench.action.interactivePlayground.pageDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pageup",
        "command": "workbench.action.interactivePlayground.pageUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "cmd+k enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "cmd+k cmd+r",
        "command": "workbench.action.keybindingsReference"
    },
    {
        "key": "cmd+9",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+0",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "cmd+k down",
        "command": "workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "cmd+k left",
        "command": "workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "cmd+k right",
        "command": "workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "cmd+k up",
        "command": "workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "cmd+k shift+cmd+left",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "cmd+k shift+cmd+right",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+cmd+1",
        "command": "workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "ctrl+cmd+9",
        "command": "workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+cmd+left",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "cmd+k cmd+q",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "shift+cmd+n",
        "command": "workbench.action.newWindow"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "alt+cmd+right",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "cmd+k alt+cmd+right",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "ctrl+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "ctrl+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "ctrl+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "ctrl+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "ctrl+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "ctrl+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "cmd+k cmd+s",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "cmd+,",
        "command": "workbench.action.openSettings"
    },
    {
        "key": "shift+cmd+u",
        "command": "workbench.action.output.toggleOutput"
    },
    {
        "key": "cmd+k shift+enter",
        "command": "workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "shift+cmd+[",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "alt+cmd+left",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "cmd+k alt+cmd+left",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenView"
    },
    {
        "key": "cmd+q",
        "command": "workbench.action.quit"
    },
    {
        "key": "shift+cmd+t",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "shift+cmd+h",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "shift+cmd+j",
        "command": "workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "cmd+k cmd+t",
        "command": "workbench.action.selectTheme"
    },
    {
        "key": "alt+cmd+tab",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "cmd+t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "f1",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "shift+cmd+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "cmd+k cmd+\\",
        "command": "workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.switchWindow"
    },
    {
        "key": "shift+cmd+b",
        "command": "workbench.action.tasks.build"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.clearSelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
    },
    {
        "key": "cmd+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "f3",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+g",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+enter",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalProcessSupported"
    },
    {
        "key": "shift+f3",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+g",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "enter",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalProcessSupported"
    },
    {
        "key": "cmd+f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+down",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+right",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+up",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+left",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.navigationModeExit",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+down",
        "command": "workbench.action.terminal.navigationModeFocusNext",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+up",
        "command": "workbench.action.terminal.navigationModeFocusPrevious",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+`",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "shift+cmd+c",
        "command": "workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "cmd+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "workbench.action.terminal.resizePaneDown",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+left",
        "command": "workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "workbench.action.terminal.resizePaneUp",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+pagedown",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "pagedown",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+end",
        "command": "workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+down",
        "command": "workbench.action.terminal.scrollToNextCommand",
        "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "cmd+up",
        "command": "workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "cmd+home",
        "command": "workbench.action.terminal.scrollToTop",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+pageup",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "pageup",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+f",
        "command": "workbench.action.terminal.searchWorkspace",
        "when": "terminalFocus && terminalProcessSupported && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "cmd+a",
        "command": "workbench.action.terminal.selectAll",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+down",
        "command": "workbench.action.terminal.selectToNextCommand",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+cmd+up",
        "command": "workbench.action.terminal.selectToPreviousCommand",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+backspace",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0017"
        }
    },
    {
        "key": "alt+delete",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001bd"
        }
    },
    {
        "key": "cmd+backspace",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0015"
        }
    },
    {
        "key": "cmd+left",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0001"
        }
    },
    {
        "key": "cmd+right",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0005"
        }
    },
    {
        "key": "ctrl+shift+5",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+\\",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+c",
        "command": "workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+r",
        "command": "workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+w",
        "command": "workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "alt+cmd+0",
        "command": "workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "ctrl+cmd+f",
        "command": "workbench.action.toggleFullScreen"
    },
    {
        "key": "cmd+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "cmd+b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+cmd+w",
        "command": "workbench.action.toggleTabsVisibility"
    },
    {
        "key": "cmd+k z",
        "command": "workbench.action.toggleZenMode"
    },
    {
        "key": "cmd+k shift+enter",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "cmd+numpad_add",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "shift+cmd+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "cmd+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "cmd+numpad_subtract",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "shift+cmd+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "cmd+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "cmd+numpad0",
        "command": "workbench.action.zoomReset"
    },
    {
        "key": "shift+cmd+m",
        "command": "workbench.actions.view.problems"
    },
    {
        "key": "shift+cmd+y",
        "command": "workbench.debug.action.toggleRepl",
        "when": "debuggersAvailable"
    },
    {
        "key": "cmd+k cmd+m",
        "command": "workbench.extensions.action.showRecommendedKeymapExtensions"
    },
    {
        "key": "cmd+k c",
        "command": "workbench.files.action.compareWithClipboard"
    },
    {
        "key": "cmd+k d",
        "command": "workbench.files.action.compareWithSaved"
    },
    {
        "key": "cmd+k e",
        "command": "workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "escape",
        "command": "workbench.statusBar.clearFocus",
        "when": "statusBarFocused"
    },
    {
        "key": "home",
        "command": "workbench.statusBar.focusFirst",
        "when": "statusBarFocused"
    },
    {
        "key": "end",
        "command": "workbench.statusBar.focusLast",
        "when": "statusBarFocused"
    },
    {
        "key": "down",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "right",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "up",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "left",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "shift+cmd+d",
        "command": "workbench.view.debug"
    },
    {
        "key": "shift+cmd+e",
        "command": "workbench.view.explorer"
    },
    {
        "key": "shift+cmd+x",
        "command": "workbench.view.extensions"
    },
    {
        "key": "ctrl+shift+g",
        "command": "workbench.view.scm"
    },
    {
        "key": "shift+cmd+f",
        "command": "workbench.view.search",
        "when": "!searchViewletVisible"
    },
    {
        "key": "alt+right",
        "command": "breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "alt+left",
        "command": "breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "escape",
        "command": "breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "cmd+k down",
        "command": "views.moveViewDown",
        "when": "focusedView != ''"
    },
    {
        "key": "cmd+k left",
        "command": "views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "cmd+k right",
        "command": "views.moveViewRight",
        "when": "focusedView != ''"
    },
    {
        "key": "cmd+k up",
        "command": "views.moveViewUp",
        "when": "focusedView != ''"
    },
    {
        "key": "cmd+k",
        "command": "workbench.action.terminal.clear",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "f6",
        "command": "workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "enter",
        "command": "debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "enter",
        "command": "debug.setVariable",
        "when": "variablesFocused"
    },
    {
        "key": "space",
        "command": "debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
    },
    {
        "key": "alt+cmd+backspace",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "escape",
        "command": "editor.closeCallHierarchy",
        "when": "callHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "cmd+down",
        "command": "explorer.openAndPassFocus",
        "when": "explorerViewletFocus && explorerViewletVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "escape",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "cmd+c",
        "command": "filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "cmd+x",
        "command": "filesExplorer.cut",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "space",
        "command": "filesExplorer.openFilePreserveFocus",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "cmd+v",
        "command": "filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "home",
        "command": "firstCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "end",
        "command": "lastCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "delete",
        "command": "moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "right",
        "command": "nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "left",
        "command": "previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "cmd+backspace",
        "command": "remote.tunnel.closeInline",
        "when": "tunnelCloseable && tunnelViewFocus"
    },
    {
        "key": "cmd+c",
        "command": "remote.tunnel.copyAddressInline",
        "when": "tunnelViewFocus && tunnelType == 'Detected' || tunnelViewFocus && tunnelType == 'Forwarded'"
    },
    {
        "key": "enter",
        "command": "remote.tunnel.label",
        "when": "tunnelViewFocus && tunnelType == 'Forwarded'"
    },
    {
        "key": "enter",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f11",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+escape",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "escape",
        "command": "notifications.hideToasts",
        "when": "notificationToastsVisible"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenNavigateNextInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "shift+cmd+p",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+q",
        "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "alt+cmd+i",
        "command": "workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "f10",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node'"
    },
    {
        "key": "cmd+k alt+cmd+s",
        "command": "git.stageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+cmd+v",
        "command": "markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+f12",
        "command": "references-view.findReferences",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "f11",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node'"
    },
    {
        "key": "cmd+k cmd+n",
        "command": "git.unstageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "cmd+k v",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "f4",
        "command": "references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "cmd+k cmd+r",
        "command": "git.revertSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f4",
        "command": "references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "shift+alt+h",
        "command": "references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "shift+cmd+2",
        "command": "autoDocstring.generateDocstring",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+b",
        "command": "codeswing.run",
        "when": "codeswing:inSwing"
    },
    {
        "key": "cmd+i",
        "command": "emojisense.quickEmojiTerminal",
        "when": "terminalFocus"
    },
    {
        "key": "escape",
        "command": "extension.vim_escape",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "shift+enter",
        "command": "jupyter.execSelectionInteractive",
        "when": "editorTextFocus && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "ctrl+alt+c",
        "command": "vega.create"
    },
    {
        "key": "shift+cmd+i",
        "command": "emojisense.quickEmojitextTerminal",
        "when": "terminalFocus"
    },
    {
        "key": "shift+enter",
        "command": "jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "escape",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && vim.active && !editorHasSelection && !editorHoverVisible && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+alt+v",
        "command": "vega.preview"
    },
    {
        "key": "cmd+i",
        "command": "emojisense.quickEmoji",
        "when": "editorTextFocus"
    },
    {
        "key": "home",
        "command": "extension.vim_home",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+enter",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+r",
        "command": "vega.preview.remote"
    },
    {
        "key": "shift+cmd+i",
        "command": "emojisense.quickEmojitext",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+home",
        "command": "extension.vim_ctrl+home",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "alt+enter",
        "command": "jupyter.runcurrentcellandaddbelow",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+q",
        "command": "vega.visual.vocabulary"
    },
    {
        "key": "end",
        "command": "extension.vim_end",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "f",
        "command": "notebook.find",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "ctrl+alt+x",
        "command": "vega.examples"
    },
    {
        "key": "ctrl+end",
        "command": "extension.vim_ctrl+end",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "k",
        "command": "list.focusUp",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "ctrl+alt+l",
        "command": "vega.examples.lite"
    },
    {
        "key": "insert",
        "command": "extension.vim_insert",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "j",
        "command": "list.focusDown",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "backspace",
        "command": "extension.vim_backspace",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "a",
        "command": "notebook.cell.insertCodeCellAbove",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "delete",
        "command": "extension.vim_delete",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "b",
        "command": "notebook.cell.insertCodeCellBelow",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "tab",
        "command": "extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "d d",
        "command": "notebook.cell.delete",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "shift+tab",
        "command": "extension.vim_shift+tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "z",
        "command": "jupyter.notebookeditor.keybind.undo",
        "when": "config.jupyter.enableKeyboardShortcuts && config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && notebookEditorFocused && !inputFocus && !inputFocus && notebookViewType == 'jupyter-notebook' && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "left",
        "command": "extension.vim_left",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "s",
        "command": "jupyter.notebookeditor.keybind.save",
        "when": "config.jupyter.enableKeyboardShortcuts && config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && notebookEditorFocused && !inputFocus && !inputFocus && notebookViewType == 'jupyter-notebook' && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "right",
        "command": "extension.vim_right",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "c",
        "command": "notebook.cell.copy",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "up",
        "command": "extension.vim_up",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
    },
    {
        "key": "x",
        "command": "notebook.cell.cut",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "down",
        "command": "extension.vim_down",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
    },
    {
        "key": "v",
        "command": "notebook.cell.paste",
        "when": "config.jupyter.enableKeyboardShortcuts && notebookEditorFocused && !inputFocus && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "g g",
        "command": "list.focusFirst",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+shift+-",
        "command": "notebook.cell.split",
        "when": "config.jupyter.enableKeyboardShortcuts && editorTextFocus && inputFocus && notebookEditorFocused && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "h",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.execute",
        "when": "config.jupyter.enableKeyboardShortcuts && editorTextFocus && inputFocus && notebookEditorFocused && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "ctrl+; s",
        "command": "jupyter.insertCellBelowPosition",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+; b",
        "command": "jupyter.insertCellBelow",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+; a",
        "command": "jupyter.insertCellAbove",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "l",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+; x",
        "command": "jupyter.deleteCells",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "o",
        "command": "list.toggleExpand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+shift+alt+[",
        "command": "jupyter.extendSelectionByCellAbove",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "/",
        "command": "list.toggleKeyboardNavigation",
        "when": "listFocus && listSupportsKeyboardNavigation && !inputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "extension.vim_ctrl+a",
        "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl"
    },
    {
        "key": "ctrl+shift+alt+]",
        "command": "jupyter.extendSelectionByCellBelow",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+b",
        "command": "extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+; u",
        "command": "jupyter.moveCellsUp",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+c",
        "command": "extension.vim_ctrl+c",
        "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
    },
    {
        "key": "ctrl+; d",
        "command": "jupyter.moveCellsDown",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+d",
        "command": "extension.vim_ctrl+d",
        "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl"
    },
    {
        "key": "ctrl+; m",
        "command": "jupyter.changeCellToMarkdown",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+; c",
        "command": "jupyter.changeCellToCode",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+d",
        "command": "list.focusPageDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "extension.vim_ctrl+e",
        "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
    },
    {
        "key": "ctrl+alt+]",
        "command": "jupyter.gotoNextCellInFile",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+f",
        "command": "extension.vim_ctrl+f",
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+alt+[",
        "command": "jupyter.gotoPrevCellInFile",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+g",
        "command": "extension.vim_ctrl+g",
        "when": "editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl"
    },
    {
        "key": "ctrl+alt+\\",
        "command": "jupyter.selectCellContents",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+h",
        "command": "extension.vim_ctrl+h",
        "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
    },
    {
        "key": "ctrl+shift+alt+\\",
        "command": "jupyter.selectCell",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+i",
        "command": "extension.vim_ctrl+i",
        "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl"
    },
    {
        "key": "ctrl+j",
        "command": "extension.vim_ctrl+j",
        "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl"
    },
    {
        "key": "ctrl+k",
        "command": "extension.vim_ctrl+k",
        "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl"
    },
    {
        "key": "ctrl+l",
        "command": "extension.vim_navigateCtrlL",
        "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl"
    },
    {
        "key": "ctrl+m",
        "command": "extension.vim_ctrl+m",
        "when": "editorTextFocus && vim.active && vim.use<C-m> && !inDebugRepl || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "ctrl+n",
        "command": "extension.vim_ctrl+n",
        "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "ctrl+o",
        "command": "extension.vim_ctrl+o",
        "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
    },
    {
        "key": "ctrl+p",
        "command": "extension.vim_ctrl+p",
        "when": "suggestWidgetVisible && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "ctrl+q",
        "command": "extension.vim_winCtrlQ",
        "when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl"
    },
    {
        "key": "ctrl+r",
        "command": "extension.vim_ctrl+r",
        "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"
    },
    {
        "key": "ctrl+t",
        "command": "extension.vim_ctrl+t",
        "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl"
    },
    {
        "key": "ctrl+u",
        "command": "extension.vim_ctrl+u",
        "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl"
    },
    {
        "key": "ctrl+u",
        "command": "list.focusPageUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+v",
        "command": "extension.vim_ctrl+v",
        "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl"
    },
    {
        "key": "ctrl+w",
        "command": "extension.vim_ctrl+w",
        "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
    },
    {
        "key": "ctrl+x",
        "command": "extension.vim_ctrl+x",
        "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl"
    },
    {
        "key": "ctrl+y",
        "command": "extension.vim_ctrl+y",
        "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl"
    },
    {
        "key": "ctrl+6",
        "command": "extension.vim_ctrl+6",
        "when": "editorTextFocus && vim.active && vim.use<C-6> && !inDebugRepl"
    },
    {
        "key": "ctrl+[",
        "command": "extension.vim_ctrl+[",
        "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl"
    },
    {
        "key": "ctrl+]",
        "command": "extension.vim_ctrl+]",
        "when": "editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl"
    },
    {
        "key": "ctrl+shift+2",
        "command": "extension.vim_ctrl+shift+2",
        "when": "editorTextFocus && vim.active && vim.use<C-shift+2>"
    },
    {
        "key": "ctrl+up",
        "command": "extension.vim_ctrl+up",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+down",
        "command": "extension.vim_ctrl+down",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+left",
        "command": "extension.vim_ctrl+left",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+right",
        "command": "extension.vim_ctrl+right",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+pagedown",
        "command": "extension.vim_ctrl+pagedown",
        "when": "editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl"
    },
    {
        "key": "ctrl+pageup",
        "command": "extension.vim_ctrl+pageup",
        "when": "editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl"
    },
    {
        "key": "ctrl+space",
        "command": "extension.vim_ctrl+space",
        "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "shift+g",
        "command": "list.focusLast",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+backspace",
        "command": "extension.vim_ctrl+backspace",
        "when": "editorTextFocus && vim.active && vim.use<C-BS> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "shift+backspace",
        "command": "extension.vim_shift+backspace",
        "when": "editorTextFocus && vim.active && vim.use<S-BS> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "cmd+left",
        "command": "extension.vim_cmd+left",
        "when": "editorTextFocus && vim.active && vim.use<D-left> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "cmd+right",
        "command": "extension.vim_cmd+right",
        "when": "editorTextFocus && vim.active && vim.use<D-right> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "cmd+a",
        "command": "extension.vim_cmd+a",
        "when": "editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "cmd+c",
        "command": "extension.vim_cmd+c",
        "when": "editorTextFocus && vim.active && vim.overrideCopy && vim.use<D-c> && !inDebugRepl"
    },
    {
        "key": "cmd+d",
        "command": "extension.vim_cmd+d",
        "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
    },
    {
        "key": "cmd+v",
        "command": "extension.vim_cmd+v",
        "when": "editorTextFocus && vim.active && vim.use<D-v> && vim.mode == ''CommandlineInProgress' !inDebugRepl' || editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "alt+cmd+down",
        "command": "extension.vim_cmd+alt+down",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "alt+cmd+up",
        "command": "extension.vim_cmd+alt+up",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "j",
        "command": "notebook.focusNextEditor",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "k",
        "command": "notebook.focusPreviousEditor",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    }
]
// Here are other available commands:
// - acceptSelectedSuggestionOnEnter
// - acceptSnippet
// - addRootFolder
// - breadcrumbs.toggle
// - changeEditorIndentation
// - cleanSearchEditorState
// - closeReferenceSearchEditor
// - codelens.showLensesInCurrentLine
// - codeswing.activeSwing.focus
// - codeswing.activeSwing.resetViewLocation
// - codeswing.addLibrary
// - codeswing.addSwingFile
// - codeswing.changeLayout
// - codeswing.deleteSwingFile
// - codeswing.exportToCodePen
// - codeswing.newSwing
// - codeswing.newSwingDirectory
// - codeswing.newSwingFromLastTemplate
// - codeswing.openConsole
// - codeswing.openDeveloperTools
// - codeswing.openSwing
// - codeswing.openSwingInNewWindow
// - codeswing.openWorkspaceSwing
// - codeswing.recordCodeTour
// - codeswing.renameSwingFile
// - codeswing.saveCurrentSwing
// - codeswing.uploadSwingFile
// - columnSelect
// - compareFiles
// - compareSelected
// - compositionEnd
// - compositionStart
// - createCursor
// - cursorRedo
// - cursorWordAccessibilityLeft
// - cursorWordAccessibilityLeftSelect
// - cursorWordAccessibilityRight
// - cursorWordAccessibilityRightSelect
// - cursorWordEndLeft
// - cursorWordEndLeftSelect
// - cursorWordPartStartLeft
// - cursorWordPartStartLeftSelect
// - cursorWordRight
// - cursorWordRightSelect
// - cursorWordStartLeft
// - cursorWordStartLeftSelect
// - cursorWordStartRight
// - cursorWordStartRightSelect
// - cut
// - debug.addConfiguration
// - debug.addToWatchExpressions
// - debug.breakWhenValueChanges
// - debug.copyEvaluatePath
// - debug.copyStackTrace
// - debug.copyValue
// - debug.enableOrDisableBreakpoint
// - debug.installAdditionalDebuggers
// - debug.jumpToCursor
// - debug.startFromConfig
// - default:compositionEnd
// - default:compositionStart
// - default:cut
// - default:paste
// - default:redo
// - default:replacePreviousChar
// - default:type
// - default:undo
// - deleteWordEndLeft
// - deleteWordEndRight
// - deleteWordStartLeft
// - deleteWordStartRight
// - editor.action.addCursorsToBottom
// - editor.action.addCursorsToTop
// - editor.action.addSelectionToPreviousFindMatch
// - editor.action.clipboardCopyWithSyntaxHighlightingAction
// - editor.action.detectIndentation
// - editor.action.duplicateSelection
// - editor.action.findReferences
// - editor.action.fixAll
// - editor.action.fontZoomIn
// - editor.action.fontZoomOut
// - editor.action.fontZoomReset
// - editor.action.forceRetokenize
// - editor.action.format
// - editor.action.formatChanges
// - editor.action.formatDocument.multiple
// - editor.action.formatSelection.multiple
// - editor.action.goToDeclaration
// - editor.action.goToSelectionAnchor
// - editor.action.goToTypeDefinition
// - editor.action.indentUsingSpaces
// - editor.action.indentUsingTabs
// - editor.action.indentationToSpaces
// - editor.action.indentationToTabs
// - editor.action.inspectTMScopes
// - editor.action.measureExtHostLatency
// - editor.action.moveCarretLeftAction
// - editor.action.moveCarretRightAction
// - editor.action.moveSelectionToPreviousFindMatch
// - editor.action.nextCommentThreadAction
// - editor.action.openDeclarationToTheSide
// - editor.action.openLink
// - editor.action.peekDeclaration
// - editor.action.peekTypeDefinition
// - editor.action.previewDeclaration
// - editor.action.referenceSearch.trigger
// - editor.action.reindentlines
// - editor.action.reindentselectedlines
// - editor.action.resetSuggestSize
// - editor.action.revealDeclaration
// - editor.action.showDefinitionPreviewHover
// - editor.action.showReferences
// - editor.action.showSnippets
// - editor.action.smartSelect.grow
// - editor.action.sortLinesAscending
// - editor.action.sortLinesDescending
// - editor.action.startDebugTextMate
// - editor.action.toggleColumnSelection
// - editor.action.toggleMinimap
// - editor.action.toggleRenderControlCharacter
// - editor.action.toggleRenderWhitespace
// - editor.action.transformToLowercase
// - editor.action.transformToTitlecase
// - editor.action.transformToUppercase
// - editor.action.transpose
// - editor.action.wordHighlight.trigger
// - editor.debug.action.addLogPoint
// - editor.debug.action.conditionalBreakpoint
// - editor.debug.action.goToNextBreakpoint
// - editor.debug.action.goToPreviousBreakpoint
// - editor.debug.action.runToCursor
// - editor.debug.action.selectionToRepl
// - editor.debug.action.selectionToWatch
// - editor.debug.action.stepIntoTargets
// - editor.emmet.action.balanceIn
// - editor.emmet.action.balanceOut
// - editor.emmet.action.decrementNumberByOne
// - editor.emmet.action.decrementNumberByOneTenth
// - editor.emmet.action.decrementNumberByTen
// - editor.emmet.action.evaluateMathExpression
// - editor.emmet.action.incrementNumberByOne
// - editor.emmet.action.incrementNumberByOneTenth
// - editor.emmet.action.incrementNumberByTen
// - editor.emmet.action.matchTag
// - editor.emmet.action.mergeLines
// - editor.emmet.action.nextEditPoint
// - editor.emmet.action.prevEditPoint
// - editor.emmet.action.reflectCSSValue
// - editor.emmet.action.removeTag
// - editor.emmet.action.selectNextItem
// - editor.emmet.action.selectPrevItem
// - editor.emmet.action.splitJoinTag
// - editor.emmet.action.toggleComment
// - editor.emmet.action.updateImageSize
// - editor.emmet.action.updateTag
// - editor.emmet.action.wrapIndividualLinesWithAbbreviation
// - editor.emmet.action.wrapWithAbbreviation
// - emmet.expandAbbreviation
// - explorer.download
// - explorer.newFile
// - explorer.newFolder
// - explorer.openWith
// - extension.js-debug.autoAttachToProcess
// - extension.js-debug.clearAutoAttachVariables
// - extension.js-debug.createDiagnostics
// - extension.js-debug.debugLink
// - extension.js-debug.experimentEnlist
// - extension.js-debug.revealPage
// - extension.js-debug.setAutoAttachVariables
// - extension.jsProfileVisualizer.table.clearCodeLenses
// - extension.node-debug.attachNodeProcess
// - extension.node-debug.toggleAutoAttach
// - extension.node-debug.toggleSkippingFile
// - extension.node-debug2.toggleSkippingFile
// - extension.open
// - extension.pwa-chrome-debug.addCustomBreakpoints
// - extension.pwa-chrome-debug.removeAllCustomBreakpoints
// - extension.pwa-chrome-debug.removeCustomBreakpoint
// - extension.pwa-node-debug.attachNodeProcess
// - extension.pwa-node-debug.createDebuggerTerminal
// - extension.pwa-node-debug.npmScript
// - extension.pwa-node-debug.pickNodeProcess
// - extension.pwa-node-debug.prettyPrint
// - extension.pwa-node-debug.startProfile
// - extension.pwa-node-debug.stopProfile
// - extension.pwa-node-debug.toggleSkippingFile
// - extension.vim_ctrl+^
// - extensions.recommendedList.focus
// - extensions.recommendedList.resetViewLocation
// - files.openTimeline
// - filesExplorer.findInWorkspace
// - gistpad._createWikiPage
// - gistpad.addDirectoryFile
// - gistpad.addFile
// - gistpad.addFileToGist
// - gistpad.addGistComment
// - gistpad.addRepositoryComment
// - gistpad.addRepositoryFile
// - gistpad.addSelectionToGist
// - gistpad.addWikiPage
// - gistpad.changeGistDescription
// - gistpad.clearScratchNotes
// - gistpad.cloneManagedRepository
// - gistpad.cloneRepository
// - gistpad.closeRepository
// - gistpad.copyFileContents
// - gistpad.copyFileUrl
// - gistpad.copyGistPadUrl
// - gistpad.copyGistUrl
// - gistpad.copyRepositoryFileUrl
// - gistpad.copyRepositoryUrl
// - gistpad.deleteDirectory
// - gistpad.deleteFile
// - gistpad.deleteGist
// - gistpad.deleteGistComment
// - gistpad.deleteRepository
// - gistpad.deleteRepositoryBranch
// - gistpad.deleteRepositoryComment
// - gistpad.deleteRepositoryDirectory
// - gistpad.deleteRepositoryFile
// - gistpad.duplicateDirectory
// - gistpad.duplicateFile
// - gistpad.duplicateGist
// - gistpad.duplicateRepositoryFile
// - gistpad.editGistComment
// - gistpad.editRepositoryComment
// - gistpad.exportGistToCodePen
// - gistpad.exportToRepo
// - gistpad.exportTour
// - gistpad.followUser
// - gistpad.forkGist
// - gistpad.gists.focus
// - gistpad.gists.resetViewLocation
// - gistpad.groupGists
// - gistpad.hideScratchNotes
// - gistpad.mergeRepositoryBranch
// - gistpad.newGistLog
// - gistpad.newPublicGist
// - gistpad.newScratchNote
// - gistpad.newSecretGist
// - gistpad.newSecretSwing
// - gistpad.newSwing
// - gistpad.openGist
// - gistpad.openGistFile
// - gistpad.openGistInBlocks
// - gistpad.openGistInBrowser
// - gistpad.openGistInGistLog
// - gistpad.openGistInNbViewer
// - gistpad.openGistLogFeed
// - gistpad.openGistWorkspace
// - gistpad.openProfile
// - gistpad.openRepository
// - gistpad.openRepositoryFileInBrowser
// - gistpad.openRepositoryInBrowser
// - gistpad.openRepositorySwing
// - gistpad.openTodayPage
// - gistpad.pasteGistFile
// - gistpad.pasteImage
// - gistpad.recordRepoCodeTour
// - gistpad.refreshGists
// - gistpad.refreshRepositories
// - gistpad.refreshShowcase
// - gistpad.renameDirectory
// - gistpad.renameFile
// - gistpad.renameRepositoryDirectory
// - gistpad.renameRepositoryFile
// - gistpad.replyGistComment
// - gistpad.repos.focus
// - gistpad.repos.resetViewLocation
// - gistpad.saveGistComment
// - gistpad.saveRepositoryComment
// - gistpad.showcase.focus
// - gistpad.showcase.resetViewLocation
// - gistpad.signIn
// - gistpad.sortGistsAlphabetically
// - gistpad.sortGistsByUpdatedTime
// - gistpad.starGist
// - gistpad.starredGists
// - gistpad.startRepoCodeTour
// - gistpad.submitShowcaseEntry
// - gistpad.switchRepositoryBranch
// - gistpad.unfollowUser
// - gistpad.ungroupGists
// - gistpad.unstarGist
// - gistpad.uploadFileToDirectory
// - gistpad.uploadFileToGist
// - gistpad.uploadRepositoryFile
// - gistpad.viewForks
// - git._syncAll
// - git.addRemote
// - git.api.getRemoteSources
// - git.api.getRepositories
// - git.api.getRepositoryState
// - git.branch
// - git.branchFrom
// - git.checkout
// - git.clean
// - git.cleanAll
// - git.cleanAllTracked
// - git.cleanAllUntracked
// - git.clone
// - git.cloneRecursive
// - git.close
// - git.commit
// - git.commitAll
// - git.commitAllAmend
// - git.commitAllAmendNoVerify
// - git.commitAllNoVerify
// - git.commitAllSigned
// - git.commitAllSignedNoVerify
// - git.commitEmpty
// - git.commitEmptyNoVerify
// - git.commitNoVerify
// - git.commitStaged
// - git.commitStagedAmend
// - git.commitStagedAmendNoVerify
// - git.commitStagedNoVerify
// - git.commitStagedSigned
// - git.commitStagedSignedNoVerify
// - git.createTag
// - git.deleteBranch
// - git.deleteTag
// - git.fetch
// - git.fetchAll
// - git.fetchPrune
// - git.ignore
// - git.init
// - git.merge
// - git.openChange
// - git.openFile
// - git.openFile2
// - git.openHEADFile
// - git.openRepository
// - git.openResource
// - git.publish
// - git.pull
// - git.pullFrom
// - git.pullRebase
// - git.push
// - git.pushForce
// - git.pushTo
// - git.pushToForce
// - git.pushWithTags
// - git.pushWithTagsForce
// - git.rebase
// - git.rebaseAbort
// - git.refresh
// - git.removeRemote
// - git.renameBranch
// - git.restoreCommitTemplate
// - git.revealInExplorer
// - git.revertChange
// - git.setLogLevel
// - git.showOutput
// - git.stage
// - git.stageAll
// - git.stageAllMerge
// - git.stageAllTracked
// - git.stageAllUntracked
// - git.stageChange
// - git.stash
// - git.stashApply
// - git.stashApplyLatest
// - git.stashDrop
// - git.stashIncludeUntracked
// - git.stashPop
// - git.stashPopLatest
// - git.sync
// - git.syncRebase
// - git.timeline.copyCommitId
// - git.timeline.copyCommitMessage
// - git.timeline.openDiff
// - git.undoCommit
// - git.unstage
// - git.unstageAll
// - github.provide-token
// - github.publish
// - goToNextReferenceFromEmbeddedEditor
// - goToPreviousReferenceFromEmbeddedEditor
// - help.tweetFeedback
// - imagePreview.zoomIn
// - imagePreview.zoomOut
// - ipython.sendFileContentsToIPython
// - ipython.sendSelectedToIPython
// - javascript.goToProjectConfig
// - javascript.reloadProjects
// - jsBrowserBreakpoints.focus
// - jsBrowserBreakpoints.resetViewLocation
// - jupyter.addcellbelow
// - jupyter.clearSavedJupyterUris
// - jupyter.collapseallcells
// - jupyter.createGitHubIssue
// - jupyter.createnewinteractive
// - jupyter.createnewnotebook
// - jupyter.debugFileInteractive
// - jupyter.debugcell
// - jupyter.debugcontinue
// - jupyter.debugcurrentcell.palette
// - jupyter.debugstepover
// - jupyter.debugstop
// - jupyter.enableDebugLogging
// - jupyter.enableLoadingWidgetScriptsFromThirdPartySource
// - jupyter.expandallcells
// - jupyter.export
// - jupyter.exportAsPythonScript
// - jupyter.exportToHTML
// - jupyter.exportToPDF
// - jupyter.exportfileandoutputasnotebook
// - jupyter.exportfileasnotebook
// - jupyter.exportoutputasnotebook
// - jupyter.importnotebook
// - jupyter.importnotebookfile
// - jupyter.interruptkernel
// - jupyter.latestExtension
// - jupyter.notebookeditor.addcellbelow
// - jupyter.notebookeditor.collapseallcells
// - jupyter.notebookeditor.expandallcells
// - jupyter.notebookeditor.export
// - jupyter.notebookeditor.interruptkernel
// - jupyter.notebookeditor.open
// - jupyter.notebookeditor.redocells
// - jupyter.notebookeditor.removeallcells
// - jupyter.notebookeditor.restartkernel
// - jupyter.notebookeditor.runallcells
// - jupyter.notebookeditor.runallcellsabove
// - jupyter.notebookeditor.runcellandallbelow
// - jupyter.notebookeditor.save
// - jupyter.notebookeditor.saveAs
// - jupyter.notebookeditor.trust
// - jupyter.notebookeditor.trusted
// - jupyter.notebookeditor.undocells
// - jupyter.openVariableView
// - jupyter.opennotebook
// - jupyter.opennotebookInPreviewEditor
// - jupyter.redocells
// - jupyter.reloadVSCode
// - jupyter.removeallcells
// - jupyter.resetLoggingLevel
// - jupyter.restartkernel
// - jupyter.runFileInteractive
// - jupyter.runallcells
// - jupyter.runallcellsabove
// - jupyter.runallcellsabove.palette
// - jupyter.runcell
// - jupyter.runcellandallbelow
// - jupyter.runcurrentcellandallbelow.palette
// - jupyter.runfromline
// - jupyter.runtoline
// - jupyter.scrolltocell
// - jupyter.selectJupyterInterpreter
// - jupyter.selectNativeJupyterUriFromToolBar
// - jupyter.selectjupytercommandline
// - jupyter.selectjupyteruri
// - jupyter.setKernel
// - jupyter.showDataViewer
// - jupyter.submitGitHubIssue
// - jupyter.switchKernel
// - jupyter.switchOffInsidersChannel
// - jupyter.switchToDailyChannel
// - jupyter.switchToWeeklyChannel
// - jupyter.undocells
// - jupyter.viewOutput
// - jupyterViewVariables.focus
// - jupyterViewVariables.resetViewLocation
// - keybindings.editor.copyCommandKeybindingEntry
// - keybindings.editor.resetKeybinding
// - keybindings.editor.showConflicts
// - keybindings.editor.showDefaultKeybindings
// - keybindings.editor.showUserKeybindings
// - lastCursorLineSelect
// - lastCursorLineSelectDrag
// - lastCursorWordSelect
// - layoutEditorGroups
// - list.focusFirstChild
// - list.focusLastChild
// - list.focusParent
// - list.scrollLeft
// - list.scrollRight
// - list.selectAndPreserveFocus
// - list.toggleFilterOnType
// - markdown.marp.export
// - markdown.marp.showQuickPick
// - markdown.marp.toggleMarpPreview
// - markdown.preview.refresh
// - markdown.preview.toggleLock
// - markdown.showLockedPreviewToSide
// - markdown.showPreviewSecuritySelector
// - markdown.showSource
// - merge-conflict.accept.all-both
// - merge-conflict.accept.all-current
// - merge-conflict.accept.all-incoming
// - merge-conflict.accept.both
// - merge-conflict.accept.current
// - merge-conflict.accept.incoming
// - merge-conflict.accept.selection
// - merge-conflict.compare
// - merge-conflict.next
// - merge-conflict.previous
// - navigateToTestFile
// - navigateToTestFunction
// - navigateToTestSuite
// - notebook.cancelExecution
// - notebook.cell.changeLanguage
// - notebook.cell.insertCodeCellAtTop
// - notebook.cell.insertMarkdownCellAbove
// - notebook.cell.insertMarkdownCellAtTop
// - notebook.cell.insertMarkdownCellBelow
// - notebook.clearAllCellsOutputs
// - notebook.diff.cell.revertInput
// - notebook.diff.cell.revertMetadata
// - notebook.diff.cell.revertOutputs
// - notebook.diff.switchToText
// - notebook.execute
// - notebook.inspectLayout
// - notebook.renderAllMarkdownCells
// - notebook.selectKernel
// - notifications.clearAll
// - notifications.focusToasts
// - notifications.showList
// - notifications.toggleList
// - npm.debugScript
// - npm.focus
// - npm.openScript
// - npm.packageManager
// - npm.refresh
// - npm.resetViewLocation
// - npm.runInstall
// - npm.runScript
// - npm.runScriptFromFolder
// - npm.runSelectedScript
// - openInTerminal
// - openReference
// - opensshremotes.addNewSshHost
// - opensshremotes.cleanDevBox
// - opensshremotes.cleanLocalServer
// - opensshremotes.cleanRemoteServer
// - opensshremotes.getHelp
// - opensshremotes.getStarted
// - opensshremotes.openConfigFile
// - opensshremotes.openEmptyWindow
// - opensshremotes.openEmptyWindowInCurrentWindow
// - opensshremotes.openEmptyWindowOnCurrentHost
// - opensshremotes.openWebUI
// - opensshremotes.provideFeedback
// - opensshremotes.reportIssue
// - opensshremotes.settings
// - opensshremotes.showDetails
// - opensshremotes.showLog
// - opensshremotesexplorer.add
// - opensshremotesexplorer.configure
// - opensshremotesexplorer.deleteFolderHistoryItem
// - opensshremotesexplorer.emptyWindowInCurrentWindow
// - opensshremotesexplorer.emptyWindowInNewWindow
// - opensshremotesexplorer.refresh
// - opensshremotesexplorer.reopenFolderInCurrentWindow
// - opensshremotesexplorer.reopenFolderInNewWindow
// - opensshremotesexplorer.startManagedHost
// - opensshremotesexplorer.stopManagedHost
// - outline.focus
// - outline.resetViewLocation
// - paste
// - perfview.show
// - php.untrustValidationExecutable
// - problems.action.clearFilterText
// - problems.action.copyMessage
// - problems.action.copyRelatedInformationMessage
// - problems.action.showMultilineMessage
// - problems.action.showSinglelineMessage
// - python.SelectAndInsertDebugConfiguration
// - python._loadLanguageServerExtension
// - python.analysis.clearCache
// - python.analysis.restartLanguageServer
// - python.askToStopTestDiscovery
// - python.askToStopTests
// - python.buildWorkspaceSymbols
// - python.clearWorkspaceInterpreter
// - python.configureTests
// - python.createTerminal
// - python.debugTestNode
// - python.debugtests
// - python.discoverTests
// - python.discoveringTests
// - python.enableLinting
// - python.enableSourceMapSupport
// - python.execInTerminal
// - python.execInTerminal-icon
// - python.execSelectionInDjangoShell
// - python.goToPythonObject
// - python.interpreterPath
// - python.launchTensorBoard
// - python.openTestNodeInEditor
// - python.pickLocalProcess
// - python.refactorExtractMethod
// - python.refactorExtractVariable
// - python.reloadVSCode
// - python.resetInterpreterSecurityStorage
// - python.revealTestItem
// - python.runCurrentTestFile
// - python.runFailedTests
// - python.runLinting
// - python.runParametrizedTests
// - python.runTestNode
// - python.runtests
// - python.selectAndDebugTestMethod
// - python.selectAndRunTestFile
// - python.selectAndRunTestMethod
// - python.selectTestToDebug
// - python.selectTestToRun
// - python.setInterpreter
// - python.setLinter
// - python.setShebangInterpreter
// - python.sortImports
// - python.startPage.open
// - python.startREPL
// - python.stopTests
// - python.switchOffInsidersChannel
// - python.switchToDailyChannel
// - python.switchToWeeklyChannel
// - python.viewLanguageServerOutput
// - python.viewOutput
// - python.viewTestOutput
// - python.viewTestUI
// - python_tests.focus
// - python_tests.resetViewLocation
// - refactorPreview.discard
// - refactorPreview.focus
// - refactorPreview.groupByFile
// - refactorPreview.groupByType
// - refactorPreview.resetViewContainerLocation
// - refactorPreview.resetViewLocation
// - refactorPreview.toggleGrouping
// - references-view.clear
// - references-view.clearHistory
// - references-view.copy
// - references-view.copyAll
// - references-view.copyPath
// - references-view.findImplementations
// - references-view.pickFromHistory
// - references-view.refind
// - references-view.refresh
// - references-view.removeCallItem
// - references-view.removeReferenceItem
// - references-view.showIncomingCalls
// - references-view.showOutgoingCalls
// - references-view.tree.focus
// - references-view.tree.resetViewLocation
// - remote.tunnel.changeLocalPort
// - remote.tunnel.closeCommandPalette
// - remote.tunnel.copyAddressCommandPalette
// - remote.tunnel.forwardCommandPalette
// - remote.tunnel.forwardInline
// - remote.tunnel.open
// - remote.tunnel.refresh
// - removeRootFolder
// - repl.action.copyAll
// - replacePreviousChar
// - revealInExplorer
// - saveAll
// - scm.openInTerminal
// - search.action.clearHistory
// - search.action.clearSearchResults
// - search.action.collapseSearchResults
// - search.action.copyAll
// - search.action.expandSearchResults
// - search.action.focusSearchList
// - search.action.openEditor
// - search.action.openNewEditor
// - search.action.openNewEditorToSide
// - search.action.refreshSearchResults
// - search.action.revealInSideBar
// - selectFirstSuggestion
// - selectForCompare
// - selectLastSuggestion
// - setContext
// - setSelection
// - settings.filterByModified
// - settings.filterByOnline
// - settings.switchToJSON
// - showEditorScreenReaderNotification
// - sshHosts.focus
// - sshHosts.resetViewLocation
// - terminal.focus
// - terminal.resetViewContainerLocation
// - terminal.resetViewLocation
// - timeline.focus
// - timeline.refresh
// - timeline.resetViewLocation
// - timeline.toggleExcludeSource:git-history
// - timeline.toggleFollowActiveEditor
// - toggle.diff.ignoreTrimWhitespace
// - toggle.diff.renderSideBySide
// - toggleEscapeSequenceLogging
// - toggleVim
// - type
// - typescript.goToProjectConfig
// - typescript.openTsServerLog
// - typescript.reloadProjects
// - typescript.restartTsServer
// - typescript.selectTypeScriptVersion
// - update.check
// - update.checkForVSCodeUpdate
// - update.checking
// - update.downloadNow
// - update.downloading
// - update.install
// - update.restart
// - update.showCurrentReleaseNotes
// - update.updating
// - vim.editVimrc
// - vim.remap
// - vim.showQuickpickCmdLine
// - vsls-contrib.gistfssignIn
// - workbench.action.acceptSelectedQuickOpenItem
// - workbench.action.addComment
// - workbench.action.addRootFolder
// - workbench.action.alternativeAcceptSelectedQuickOpenItem
// - workbench.action.blur
// - workbench.action.clearCommandHistory
// - workbench.action.clearEditorHistory
// - workbench.action.clearRecentFiles
// - workbench.action.closeActivePinnedEditor
// - workbench.action.closeEditorInAllGroups
// - workbench.action.closeEditorsAndGroup
// - workbench.action.closeEditorsInOtherGroups
// - workbench.action.closeEditorsToTheLeft
// - workbench.action.closeEditorsToTheRight
// - workbench.action.closePanel
// - workbench.action.closeSidebar
// - workbench.action.configureLanguageBasedSettings
// - workbench.action.configureLocale
// - workbench.action.configureRuntimeArguments
// - workbench.action.debug.configure
// - workbench.action.debug.disconnect
// - workbench.action.debug.restartFrame
// - workbench.action.debug.reverseContinue
// - workbench.action.debug.selectandstart
// - workbench.action.debug.stepBack
// - workbench.action.debug.terminateThread
// - workbench.action.decreaseViewHeight
// - workbench.action.decreaseViewSize
// - workbench.action.decreaseViewWidth
// - workbench.action.duplicateWorkspaceInNewWindow
// - workbench.action.editor.changeEOL
// - workbench.action.editor.changeEncoding
// - workbench.action.editorLayoutSingle
// - workbench.action.editorLayoutThreeColumns
// - workbench.action.editorLayoutThreeRows
// - workbench.action.editorLayoutTwoByTwoGrid
// - workbench.action.editorLayoutTwoColumns
// - workbench.action.editorLayoutTwoColumnsBottom
// - workbench.action.editorLayoutTwoRows
// - workbench.action.editorLayoutTwoRowsRight
// - workbench.action.evenEditorWidths
// - workbench.action.extensionHostProfilder.stop
// - workbench.action.files.openFileFolderInNewWindow
// - workbench.action.files.openFileInNewWindow
// - workbench.action.files.openFolderInNewWindow
// - workbench.action.files.revert
// - workbench.action.files.saveFiles
// - workbench.action.firstEditorInGroup
// - workbench.action.focusAboveGroupWithoutWrap
// - workbench.action.focusActiveEditorGroup
// - workbench.action.focusActivityBar
// - workbench.action.focusBelowGroupWithoutWrap
// - workbench.action.focusCommentsPanel
// - workbench.action.focusLastEditorGroup
// - workbench.action.focusLeftGroupWithoutWrap
// - workbench.action.focusNextGroup
// - workbench.action.focusPanel
// - workbench.action.focusPreviousGroup
// - workbench.action.focusQuickOpen
// - workbench.action.focusRightGroupWithoutWrap
// - workbench.action.generateColorTheme
// - workbench.action.increaseViewHeight
// - workbench.action.increaseViewSize
// - workbench.action.increaseViewWidth
// - workbench.action.inspectContextKeys
// - workbench.action.inspectKeyMappings
// - workbench.action.inspectKeyMappingsJSON
// - workbench.action.installCommandLine
// - workbench.action.joinAllGroups
// - workbench.action.joinTwoGroups
// - workbench.action.logStorage
// - workbench.action.logWorkingCopies
// - workbench.action.manageTrustedDomain
// - workbench.action.maximizeEditor
// - workbench.action.mergeAllWindowTabs
// - workbench.action.minimizeOtherEditors
// - workbench.action.moveEditorToAboveGroup
// - workbench.action.moveEditorToBelowGroup
// - workbench.action.moveEditorToLeftGroup
// - workbench.action.moveEditorToRightGroup
// - workbench.action.moveFocusedView
// - workbench.action.moveView
// - workbench.action.moveWindowTabToNewWindow
// - workbench.action.navigateDown
// - workbench.action.navigateEditorGroups
// - workbench.action.navigateLast
// - workbench.action.navigateLeft
// - workbench.action.navigateRight
// - workbench.action.navigateUp
// - workbench.action.newGroupAbove
// - workbench.action.newGroupBelow
// - workbench.action.newGroupLeft
// - workbench.action.newGroupRight
// - workbench.action.newWindowTab
// - workbench.action.nextPanelView
// - workbench.action.nextSideBarView
// - workbench.action.openActiveLogOutputFile
// - workbench.action.openDefaultKeybindingsFile
// - workbench.action.openDocumentationUrl
// - workbench.action.openEditorAtIndex
// - workbench.action.openExtensionLogsFolder
// - workbench.action.openFolderSettings
// - workbench.action.openFolderSettingsFile
// - workbench.action.openGlobalKeybindingsFile
// - workbench.action.openGlobalSettings
// - workbench.action.openIntroductoryVideosUrl
// - workbench.action.openIssueReporter
// - workbench.action.openLicenseUrl
// - workbench.action.openLogFile
// - workbench.action.openLogsFolder
// - workbench.action.openNewsletterSignupUrl
// - workbench.action.openNextRecentlyUsedEditor
// - workbench.action.openNextRecentlyUsedEditorInGroup
// - workbench.action.openPreviousEditorFromHistory
// - workbench.action.openPreviousRecentlyUsedEditor
// - workbench.action.openPreviousRecentlyUsedEditorInGroup
// - workbench.action.openPrivacyStatementUrl
// - workbench.action.openProcessExplorer
// - workbench.action.openRawDefaultSettings
// - workbench.action.openRemoteSettings
// - workbench.action.openRequestFeatureUrl
// - workbench.action.openSettings2
// - workbench.action.openSettingsJson
// - workbench.action.openSnippets
// - workbench.action.openTipsAndTricksUrl
// - workbench.action.openTwitterUrl
// - workbench.action.openView
// - workbench.action.openWorkspace
// - workbench.action.openWorkspaceConfigFile
// - workbench.action.openWorkspaceInNewWindow
// - workbench.action.openWorkspaceSettings
// - workbench.action.openWorkspaceSettingsFile
// - workbench.action.positionPanelBottom
// - workbench.action.positionPanelLeft
// - workbench.action.positionPanelRight
// - workbench.action.previousPanelView
// - workbench.action.previousSideBarView
// - workbench.action.problems.focus
// - workbench.action.quickOpenLeastRecentlyUsedEditor
// - workbench.action.quickOpenNavigateNext
// - workbench.action.quickOpenNavigateNextInTerminalPicker
// - workbench.action.quickOpenNavigatePrevious
// - workbench.action.quickOpenNavigatePreviousInTerminalPicker
// - workbench.action.quickOpenPreviousEditor
// - workbench.action.quickOpenPreviousRecentlyUsedEditor
// - workbench.action.quickOpenRecent
// - workbench.action.quickOpenTerm
// - workbench.action.quickPickManyToggle
// - workbench.action.quickSwitchWindow
// - workbench.action.reloadWindowWithExtensionsDisabled
// - workbench.action.remote.close
// - workbench.action.remote.showMenu
// - workbench.action.removeRootFolder
// - workbench.action.reopenWithEditor
// - workbench.action.reportPerformanceIssueUsingReporter
// - workbench.action.resetFocusedViewLocation
// - workbench.action.resetViewLocations
// - workbench.action.restartExtensionHost
// - workbench.action.revertAndCloseActiveEditor
// - workbench.action.saveWorkspaceAs
// - workbench.action.selectIconTheme
// - workbench.action.selectProductIconTheme
// - workbench.action.setLogLevel
// - workbench.action.showAboutDialog
// - workbench.action.showAllEditorsByMostRecentlyUsed
// - workbench.action.showEditorsInActiveGroup
// - workbench.action.showEditorsInGroup
// - workbench.action.showEmmetCommands
// - workbench.action.showErrorsWarnings
// - workbench.action.showInteractivePlayground
// - workbench.action.showInterfaceOverview
// - workbench.action.showLogs
// - workbench.action.showNextWindowTab
// - workbench.action.showPreviousWindowTab
// - workbench.action.showRuntimeExtensions
// - workbench.action.showWelcomePage
// - workbench.action.splitEditorDown
// - workbench.action.splitEditorLeft
// - workbench.action.splitEditorRight
// - workbench.action.splitEditorUp
// - workbench.action.tasks.configureDefaultBuildTask
// - workbench.action.tasks.configureDefaultTestTask
// - workbench.action.tasks.configureTaskRunner
// - workbench.action.tasks.manageAutomaticRunning
// - workbench.action.tasks.openUserTasks
// - workbench.action.tasks.openWorkspaceFileTasks
// - workbench.action.tasks.reRunTask
// - workbench.action.tasks.restartTask
// - workbench.action.tasks.showLog
// - workbench.action.tasks.showTasks
// - workbench.action.tasks.terminate
// - workbench.action.tasks.test
// - workbench.action.tasks.toggleProblems
// - workbench.action.terminal.attachToSession
// - workbench.action.terminal.focus
// - workbench.action.terminal.focusAtIndex1
// - workbench.action.terminal.focusAtIndex2
// - workbench.action.terminal.focusAtIndex3
// - workbench.action.terminal.focusAtIndex4
// - workbench.action.terminal.focusAtIndex5
// - workbench.action.terminal.focusAtIndex6
// - workbench.action.terminal.focusAtIndex7
// - workbench.action.terminal.focusAtIndex8
// - workbench.action.terminal.focusAtIndex9
// - workbench.action.terminal.focusNext
// - workbench.action.terminal.focusPrevious
// - workbench.action.terminal.kill
// - workbench.action.terminal.manageWorkspaceShellPermissions
// - workbench.action.terminal.newInActiveWorkspace
// - workbench.action.terminal.newLocal
// - workbench.action.terminal.relaunch
// - workbench.action.terminal.rename
// - workbench.action.terminal.runActiveFile
// - workbench.action.terminal.runSelectedText
// - workbench.action.terminal.selectDefaultShell
// - workbench.action.terminal.selectToNextLine
// - workbench.action.terminal.selectToPreviousLine
// - workbench.action.terminal.showEnvironmentInformation
// - workbench.action.terminal.splitInActiveWorkspace
// - workbench.action.toggleActivityBarVisibility
// - workbench.action.toggleAutoSave
// - workbench.action.toggleCenteredLayout
// - workbench.action.toggleConfirmBeforeClose
// - workbench.action.toggleEditorType
// - workbench.action.toggleEditorVisibility
// - workbench.action.toggleEditorWidths
// - workbench.action.toggleKeybindingsLog
// - workbench.action.toggleMaximizedPanel
// - workbench.action.toggleMultiCursorModifier
// - workbench.action.toggleScreencastMode
// - workbench.action.toggleSearchOnType
// - workbench.action.toggleSharedProcess
// - workbench.action.toggleSidebarPosition
// - workbench.action.toggleStatusbarVisibility
// - workbench.action.toggleWindowTabsBar
// - workbench.action.uninstallCommandLine
// - workbench.action.url.openUrl
// - workbench.action.webview.openDeveloperTools
// - workbench.action.webview.reloadWebviewAction
// - workbench.actions.sync.compareWithLocal
// - workbench.actions.sync.editMachineName
// - workbench.actions.sync.replaceCurrent
// - workbench.actions.sync.resolveResource
// - workbench.actions.sync.turnOffSyncOnMachine
// - workbench.actions.treeView.codeswing.activeSwing.collapseAll
// - workbench.actions.treeView.codeswing.activeSwing.refresh
// - workbench.actions.treeView.gistpad.gists.collapseAll
// - workbench.actions.treeView.gistpad.gists.refresh
// - workbench.actions.treeView.gistpad.repos.collapseAll
// - workbench.actions.treeView.gistpad.repos.refresh
// - workbench.actions.treeView.gistpad.showcase.collapseAll
// - workbench.actions.treeView.gistpad.showcase.refresh
// - workbench.actions.treeView.jsBrowserBreakpoints.collapseAll
// - workbench.actions.treeView.jsBrowserBreakpoints.refresh
// - workbench.actions.treeView.npm.collapseAll
// - workbench.actions.treeView.npm.refresh
// - workbench.actions.treeView.python_tests.collapseAll
// - workbench.actions.treeView.python_tests.refresh
// - workbench.actions.treeView.references-view.tree.collapseAll
// - workbench.actions.treeView.references-view.tree.refresh
// - workbench.actions.treeView.sshHosts.collapseAll
// - workbench.actions.treeView.sshHosts.refresh
// - workbench.actions.treeView.workbench.views.sync.localActivity.collapseAll
// - workbench.actions.treeView.workbench.views.sync.localActivity.refresh
// - workbench.actions.treeView.workbench.views.sync.machines.collapseAll
// - workbench.actions.treeView.workbench.views.sync.machines.refresh
// - workbench.actions.treeView.workbench.views.sync.merges.collapseAll
// - workbench.actions.treeView.workbench.views.sync.merges.refresh
// - workbench.actions.treeView.workbench.views.sync.remoteActivity.collapseAll
// - workbench.actions.treeView.workbench.views.sync.remoteActivity.refresh
// - workbench.actions.view.toggleProblems
// - workbench.debug.action.focusBreakpointsView
// - workbench.debug.action.focusCallStackView
// - workbench.debug.action.focusRepl
// - workbench.debug.action.focusVariablesView
// - workbench.debug.action.focusWatchView
// - workbench.debug.breakPointsView.resetViewLocation
// - workbench.debug.callStackView.resetViewLocation
// - workbench.debug.loadedScriptsView.focus
// - workbench.debug.loadedScriptsView.resetViewLocation
// - workbench.debug.panel.action.clearReplAction
// - workbench.debug.variablesView.resetViewLocation
// - workbench.debug.viewlet.action.addFunctionBreakpointAction
// - workbench.debug.viewlet.action.disableAllBreakpoints
// - workbench.debug.viewlet.action.enableAllBreakpoints
// - workbench.debug.viewlet.action.reapplyBreakpointsAction
// - workbench.debug.viewlet.action.removeAllBreakpoints
// - workbench.debug.watchExpressionsView.resetViewLocation
// - workbench.debug.welcome.focus
// - workbench.debug.welcome.resetViewLocation
// - workbench.explorer.fileView.focus
// - workbench.explorer.fileView.resetViewLocation
// - workbench.explorer.openEditorsView.resetViewLocation
// - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceFolderRecommendations
// - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceRecommendations
// - workbench.extensions.action.checkForUpdates
// - workbench.extensions.action.clearExtensionsSearchResults
// - workbench.extensions.action.configure
// - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
// - workbench.extensions.action.configureWorkspaceRecommendedExtensions
// - workbench.extensions.action.copyExtension
// - workbench.extensions.action.copyExtensionId
// - workbench.extensions.action.debugExtensionHost
// - workbench.extensions.action.disableAll
// - workbench.extensions.action.disableAllWorkspace
// - workbench.extensions.action.disableAutoUpdate
// - workbench.extensions.action.enableAll
// - workbench.extensions.action.enableAllWorkspace
// - workbench.extensions.action.enableAutoUpdate
// - workbench.extensions.action.extensionHostProfile
// - workbench.extensions.action.install.specificVersion
// - workbench.extensions.action.installExtensions
// - workbench.extensions.action.installVSIX
// - workbench.extensions.action.listBuiltInExtensions
// - workbench.extensions.action.listOutdatedExtensions
// - workbench.extensions.action.manageAuthorizedExtensionURIs
// - workbench.extensions.action.openExtensionsFolder
// - workbench.extensions.action.reinstall
// - workbench.extensions.action.saveExtensionHostProfile
// - workbench.extensions.action.showAzureExtensions
// - workbench.extensions.action.showDisabledExtensions
// - workbench.extensions.action.showEnabledExtensions
// - workbench.extensions.action.showExtensionsForLanguage
// - workbench.extensions.action.showExtensionsWithIds
// - workbench.extensions.action.showInstalledExtensions
// - workbench.extensions.action.showLanguageExtensions
// - workbench.extensions.action.showPopularExtensions
// - workbench.extensions.action.showRecommendedExtensions
// - workbench.extensions.action.stopExtensionHostProfile
// - workbench.extensions.action.toggleIgnoreExtension
// - workbench.extensions.action.updateAllExtensions
// - workbench.extensions.command.installFromVSIX
// - workbench.extensions.installLocalExtensions
// - workbench.extensions.installMissingDependencies
// - workbench.files.action.acceptLocalChanges
// - workbench.files.action.collapseExplorerFolders
// - workbench.files.action.compareFileWith
// - workbench.files.action.focusFilesExplorer
// - workbench.files.action.refreshFilesExplorer
// - workbench.files.action.revertLocalChanges
// - workbench.files.action.saveAllInGroup
// - workbench.files.action.showActiveFileInExplorer
// - workbench.getCodeExchangeProxyEndpoints
// - workbench.output.action.clearOutput
// - workbench.output.action.switchBetweenOutputs
// - workbench.output.action.toggleAutoScroll
// - workbench.panel.comments.resetViewContainerLocation
// - workbench.panel.comments.resetViewLocation
// - workbench.panel.markers.resetViewContainerLocation
// - workbench.panel.markers.view.focus
// - workbench.panel.markers.view.resetViewLocation
// - workbench.panel.output.focus
// - workbench.panel.output.resetViewContainerLocation
// - workbench.panel.output.resetViewLocation
// - workbench.panel.repl.resetViewContainerLocation
// - workbench.panel.repl.view.focus
// - workbench.panel.repl.view.resetViewLocation
// - workbench.scm.focus
// - workbench.scm.repositories.focus
// - workbench.scm.repositories.resetViewLocation
// - workbench.scm.resetViewLocation
// - workbench.userData.actions.openSyncBackupsFolder
// - workbench.userData.actions.signin
// - workbench.userData.actions.turningOn
// - workbench.userDataSync.actions.configure
// - workbench.userDataSync.actions.manage
// - workbench.userDataSync.actions.resolveKeybindingsConflicts
// - workbench.userDataSync.actions.resolveSettingsConflicts
// - workbench.userDataSync.actions.resolveSnippetsConflicts
// - workbench.userDataSync.actions.settings
// - workbench.userDataSync.actions.showLog
// - workbench.userDataSync.actions.showSyncedData
// - workbench.userDataSync.actions.syncNow
// - workbench.userDataSync.actions.turnOff
// - workbench.userDataSync.actions.turnOn
// - workbench.view.debug.resetViewContainerLocation
// - workbench.view.explorer.resetViewContainerLocation
// - workbench.view.extension.gistpad
// - workbench.view.extension.gistpad.resetViewContainerLocation
// - workbench.view.extension.jupyter-variables
// - workbench.view.extension.jupyter-variables.resetViewContainerLocation
// - workbench.view.extension.references-view
// - workbench.view.extension.references-view.resetViewContainerLocation
// - workbench.view.extension.test
// - workbench.view.extension.test.resetViewContainerLocation
// - workbench.view.extensions.resetViewContainerLocation
// - workbench.view.remote
// - workbench.view.remote.resetViewContainerLocation
// - workbench.view.scm.resetViewContainerLocation
// - workbench.view.search.focus
// - workbench.view.search.resetViewContainerLocation
// - workbench.view.search.resetViewLocation
// - workbench.view.sync.resetViewContainerLocation
// - workbench.views.extensions.builtinFeatureExtensions.focus
// - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
// - workbench.views.extensions.builtinThemeExtensions.focus
// - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
// - workbench.views.extensions.local.installed.focus
// - workbench.views.extensions.local.installed.resetViewLocation
// - workbench.views.extensions.marketplace.focus
// - workbench.views.extensions.marketplace.resetViewLocation
// - workbench.views.extensions.otherRecommendations.focus
// - workbench.views.extensions.otherRecommendations.resetViewLocation
// - workbench.views.extensions.popular.focus
// - workbench.views.extensions.popular.resetViewLocation
// - workbench.views.extensions.remote.installed.focus
// - workbench.views.extensions.remote.installed.resetViewLocation
// - workbench.views.extensions.searchBuiltin.focus
// - workbench.views.extensions.searchBuiltin.resetViewLocation
// - workbench.views.extensions.searchDisabled.focus
// - workbench.views.extensions.searchDisabled.resetViewLocation
// - workbench.views.extensions.searchEnabled.focus
// - workbench.views.extensions.searchEnabled.resetViewLocation
// - workbench.views.extensions.searchInstalled.focus
// - workbench.views.extensions.searchInstalled.resetViewLocation
// - workbench.views.extensions.searchOutdated.focus
// - workbench.views.extensions.searchOutdated.resetViewLocation
// - workbench.views.extensions.workspaceRecommendations.focus
// - workbench.views.extensions.workspaceRecommendations.resetViewLocation
// - workbench.views.sync.localActivity.focus
// - workbench.views.sync.localActivity.resetViewLocation
// - workbench.views.sync.machines.focus
// - workbench.views.sync.machines.resetViewLocation
// - workbench.views.sync.merges.focus
// - workbench.views.sync.merges.resetViewLocation
// - workbench.views.sync.remoteActivity.focus
// - workbench.views.sync.remoteActivity.resetViewLocation
// - ~remote.forwardedPorts.focus
// - ~remote.forwardedPorts.resetViewLocation
